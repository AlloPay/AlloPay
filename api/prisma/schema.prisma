datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../generated"
}

model User {
  id String @id @db.Char(42) // address

  contacts  Contact[]
  approvals Approval[]
  comments  Comment[]
  reactions Reaction[]
  approvers Approver[]
}

model Account {
  id         String  @id @db.Char(42) // address
  name       String  @default("")
  deploySalt String? @db.Char(66) // bytes32
  impl       String? @db.Char(42) // address

  wallets   Wallet[]
  quorums   Quorum[]
  txs       Tx[]
  approvals Approval[]
  comments  Comment[]
  reactions Reaction[]
  approvers Approver[]
}

model Wallet {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @db.Char(42) // address
  ref       String  @db.Char(10) // bytes4
  name      String  @default("")

  createProposal     Tx?     @relation(name: "createWallet", fields: [accountId, createProposalHash], references: [accountId, hash], onDelete: Cascade)
  createProposalHash String? @db.Char(66) // bytes32
  removeProposal     Tx?     @relation(name: "removeWallet", fields: [accountId, removeProposalHash], references: [accountId, hash], onDelete: SetNull)
  removeProposalHash String? @db.Char(66) // bytes32

  quorums   Quorum[]
  approvers Approver[]
  txs       Tx[]       @relation(name: "txs")

  @@id([accountId, ref])
  @@unique([accountId, createProposalHash])
  @@unique([accountId, removeProposalHash])
}

model Quorum {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @db.Char(42) // address
  wallet    Wallet  @relation(fields: [accountId, walletRef], references: [accountId, ref], onDelete: Cascade)
  walletRef String  @db.Char(10) // bytes4
  hash      String  @db.Char(66) // bytes32

  createProposal     Tx?     @relation(name: "createQuorum", fields: [accountId, createProposalHash], references: [accountId, hash], onDelete: Cascade)
  createProposalHash String? @db.Char(66) // bytes32
  removeProposal     Tx?     @relation(name: "removeQuorum", fields: [accountId, removeProposalHash], references: [accountId, hash], onDelete: SetNull)
  removeProposalHash String? @db.Char(66) // bytes32

  approvers Approver[]

  @@id([accountId, walletRef, hash])
}

model Approver {
  account    Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String  @db.Char(42) // address
  wallet     Wallet  @relation(fields: [accountId, walletRef], references: [accountId, ref], onDelete: Cascade)
  walletRef  String  @db.Char(10) // bytes4
  quorum     Quorum  @relation(fields: [accountId, walletRef, quorumHash], references: [accountId, walletRef, hash], onDelete: Cascade)
  quorumHash String  @db.Char(66) // bytes32
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @db.Char(42) // address

  @@id([accountId, walletRef, quorumHash, userId])
}

model Contact {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(42) // address
  addr   String @db.Char(42) // address
  name   String

  @@id([userId, addr])
  @@unique([userId, name], name: "name_identifier")
}

model ContractMethod {
  contract String @db.Char(42) // address
  sighash  String @db.Char(10) // bytes4
  fragment Json

  @@id([contract, sighash])
  @@index([sighash])
}

model Tx {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @db.Char(42) // address
  hash      String  @db.Char(66) // bytes32
  to        String  @db.Char(42) // address
  value     String //@db.Decimal(79, 0) // uint256
  data      String // bytes
  salt      String  @db.Char(18) // bytes8
  wallet    Wallet  @relation(name: "txs", fields: [accountId, walletRef], references: [accountId, ref], onDelete: Cascade)
  walletRef String  @db.Char(10) // bytes4

  approvals   Approval[]
  createdAt   DateTime     @default(now())
  submissions Submission[]

  proposedCreateWallet  Wallet?  @relation(name: "createWallet")
  proposedRemoveWallet  Wallet?  @relation(name: "removeWallet")
  proposedCreateQuroums Quorum[] @relation(name: "createQuorum")
  proposedRemoveQuroums Quorum[] @relation(name: "removeQuorum")

  @@id([accountId, hash])
}

model Submission {
  hash      String   @id @db.Char(66) // bytes32
  tx        Tx       @relation(fields: [accountId, txHash], references: [accountId, hash], onDelete: Cascade)
  accountId String   @db.Char(42) // address
  txHash    String   @db.Char(66) // bytes32
  createdAt DateTime @default(now())
  nonce     Int
  gasLimit  Decimal  @db.Decimal(19, 0)
  gasPrice  Decimal? @db.Decimal(19, 0)
  finalized Boolean
}

model Approval {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Char(42) // address
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String   @db.Char(42) // address
  tx        Tx       @relation(fields: [accountId, txHash], references: [accountId, hash], onDelete: Cascade)
  txHash    String   @db.Char(66) // bytes32
  signature String // bytes
  createdAt DateTime @default(now())

  @@id([accountId, txHash, userId])
}

model Comment {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @db.Char(42) // address
  key       String
  nonce     Int     @default(autoincrement())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.Char(42) // address
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  reactions Reaction[]

  @@id([accountId, key, nonce])
  @@index([accountId, key])
}

model Reaction {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @db.Char(42) // address
  key       String
  nonce     Int

  comment   Comment  @relation(fields: [accountId, key, nonce], references: [accountId, key, nonce], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Char(42) // address
  emojis    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([accountId, key, nonce, userId])
}
