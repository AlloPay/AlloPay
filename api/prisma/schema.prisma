datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Dedicated shadow database is required with Heroku - https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database#cloud-hosted-shadow-databases-must-be-created-manually
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../generated"
}

// https://www.npmjs.com/package/@quixo3/prisma-session-store
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Safe {
  id         String     @id @db.Char(42) // address
  groups     Group[]
  name       String     @default("")
  deploySalt String?    @db.Char(66) // bytes32
  txs        Tx[]
  ops        Op[]
  approvals  Approval[]
  comments   Comment[]
  reactions  Reaction[]
}

model Group {
  safe      Safe       @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String     @db.Char(42) // address
  ref       String     @db.Char(66) // bytes32
  approvers Approver[]
  name      String     @default("")

  @@id([safeId, ref])
}

model User {
  id        String     @id @db.Char(42) // address
  groups    Approver[]
  contacts  Contact[]
  approvals Approval[]
  comments  Comment[]
  reactions Reaction[]
}

model Approver {
  group    Group   @relation(fields: [safeId, groupRef], references: [safeId, ref], onDelete: Cascade)
  safeId   String  @db.Char(42) // address
  groupRef String  @db.Char(66) // bytes32
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @db.Char(42) // address
  weight   Decimal @db.Decimal(79, 0) // uint256

  @@id([safeId, groupRef, userId])
}

model Contact {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Char(42) // address
  addr   String @db.Char(42) // address
  name   String

  @@id([userId, addr])
  @@unique([userId, name], name: "name_identifier")
}

model ContractMethod {
  contract String @db.Char(42) // address
  sighash  String @db.Char(10) // bytes4
  fragment Json

  @@id([contract, sighash])
  @@index([sighash])
}

model Tx {
  safe        Safe         @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId      String       @db.Char(42) // address
  hash        String       @db.Char(66) // bytes32
  ops         Op[]
  approvals   Approval[]
  createdAt   DateTime     @default(now())
  submissions Submission[]

  @@id([safeId, hash])
}

model Submission {
  hash      String   @id @db.Char(66) // bytes32
  tx        Tx       @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  safeId    String   @db.Char(42) // address
  txHash    String   @db.Char(66) // bytes32
  createdAt DateTime @default(now())
  nonce     Int
  gasLimit  Decimal  @db.Decimal(19, 0)
  gasPrice  Decimal? @db.Decimal(19, 0)
  finalized Boolean
}

model Op {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  tx     Tx     @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  txHash String @db.Char(66) // bytes32
  hash   String @db.Char(66) // bytes32
  to     String @db.Char(42) // address
  value  String //@db.Decimal(79, 0) // uint256
  data   String // bytes
  nonce  String //@db.Decimal(79, 0) // uint256

  @@id([safeId, txHash, hash])
}

model Approval {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Char(42) // address
  safe      Safe     @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String   @db.Char(42) // address
  tx        Tx       @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  txHash    String   @db.Char(66) // bytes32
  signature String // bytes
  createdAt DateTime @default(now())

  @@id([safeId, txHash, userId])
}

model Comment {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  key    String
  nonce  Int    @default(autoincrement())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.Char(42) // address
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  reactions Reaction[]

  @@id([safeId, key, nonce])
  @@index([safeId, key])
}

model Reaction {
  comment   Comment  @relation(fields: [safeId, key, nonce], references: [safeId, key, nonce], onDelete: Cascade)
  safe      Safe     @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String   @db.Char(42) // address
  key       String
  nonce     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Char(42) // address
  emojis    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([safeId, key, nonce, userId])
}
