datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../generated"
}

model User {
  id String @id @db.Char(42) // address

  contacts  Contact[]
  approvals Approval[]
  comments  Comment[]
  reactions Reaction[]
  approvers Approver[]
}

model Safe {
  id         String  @id @db.Char(42) // address
  name       String  @default("")
  deploySalt String? @db.Char(66) // bytes32
  impl       String? @db.Char(42) // address

  accounts  Account[]
  quorums   Quorum[]
  txs       Tx[]
  approvals Approval[]
  comments  Comment[]
  reactions Reaction[]
  approvers Approver[]
}

model Account {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  ref    String @db.Char(10) // bytes4
  name   String @default("")

  // Tx
  txHash String? @db.Char(66) // bytes32
  tx     Tx?     @relation(fields: [safeId, txHash], references: [safeId, hash])

  quorums   Quorum[]
  approvers Approver[]

  @@id([safeId, ref])
  @@unique([safeId, txHash])
}

model Quorum {
  safe       Safe    @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId     String  @db.Char(42) // address
  account    Account @relation(fields: [safeId, accountRef], references: [safeId, ref], onDelete: Cascade)
  accountRef String  @db.Char(10) // bytes4
  hash       String  @db.Char(66) // bytes32

  // Tx
  txHash String? @db.Char(66) // bytes32
  tx     Tx?     @relation(fields: [safeId, txHash], references: [safeId, hash])

  approvers Approver[]

  @@id([safeId, accountRef, hash])
  @@unique([safeId, txHash])
}

model Approver {
  safe       Safe    @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId     String  @db.Char(42) // address
  account    Account @relation(fields: [safeId, accountRef], references: [safeId, ref], onDelete: Cascade)
  accountRef String  @db.Char(10) // bytes4
  quorum     Quorum  @relation(fields: [safeId, accountRef, quorumHash], references: [safeId, accountRef, hash], onDelete: Cascade)
  quorumHash String  @db.Char(66) // bytes32
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @db.Char(42) // address

  @@id([safeId, accountRef, quorumHash, userId])
}

model Contact {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Char(42) // address
  addr   String @db.Char(42) // address
  name   String

  @@id([userId, addr])
  @@unique([userId, name], name: "name_identifier")
}

model ContractMethod {
  contract String @db.Char(42) // address
  sighash  String @db.Char(10) // bytes4
  fragment Json

  @@id([contract, sighash])
  @@index([sighash])
}

model Tx {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  hash   String @db.Char(66) // bytes32
  to     String @db.Char(42) // address
  value  String //@db.Decimal(79, 0) // uint256
  data   String // bytes
  salt   String @db.Char(18) // bytes8

  approvals   Approval[]
  createdAt   DateTime     @default(now())
  submissions Submission[]

  // Operations
  accountTx Account?
  quorumTx  Quorum?

  @@id([safeId, hash])
}

model Submission {
  hash      String   @id @db.Char(66) // bytes32
  tx        Tx       @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  safeId    String   @db.Char(42) // address
  txHash    String   @db.Char(66) // bytes32
  createdAt DateTime @default(now())
  nonce     Int
  gasLimit  Decimal  @db.Decimal(19, 0)
  gasPrice  Decimal? @db.Decimal(19, 0)
  finalized Boolean
}

model Approval {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Char(42) // address
  safe      Safe     @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String   @db.Char(42) // address
  tx        Tx       @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  txHash    String   @db.Char(66) // bytes32
  signature String // bytes
  createdAt DateTime @default(now())

  @@id([safeId, txHash, userId])
}

model Comment {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  key    String
  nonce  Int    @default(autoincrement())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.Char(42) // address
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  reactions Reaction[]

  @@id([safeId, key, nonce])
  @@index([safeId, key])
}

model Reaction {
  safe   Safe   @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String @db.Char(42) // address
  key    String
  nonce  Int

  comment   Comment  @relation(fields: [safeId, key, nonce], references: [safeId, key, nonce], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Char(42) // address
  emojis    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([safeId, key, nonce, userId])
}
