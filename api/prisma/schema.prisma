datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Dedicated shadow database is required with Heroku - https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database#cloud-hosted-shadow-databases-must-be-created-manually
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../generated"
}

// https://www.npmjs.com/package/@quixo3/prisma-session-store
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Safe {
  id         String     @id @db.Char(42) // address
  groups     Group[]
  name       String?
  deploySalt String?    @db.Char(66) // bytes32
  txs        Tx[]
  ops        Op[]
  approvals  Approval[]
  // comments   Comment[]
}

model Group {
  safe      Safe            @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String          @db.Char(42) // address
  hash      String          @db.Char(66) // bytes32
  approvers GroupApprover[]
  name      String?

  @@id([safeId, hash])
}

model Approver {
  id        String          @id @db.Char(42) // address
  groups    GroupApprover[]
  contacts  Contact[]
  approvals Approval[]
  // comments Comment[]
}

model GroupApprover {
  group      Group    @relation(fields: [safeId, groupHash], references: [safeId, hash], onDelete: Cascade)
  safeId     String   @db.Char(42) // address
  groupHash  String   @db.Char(66) // bytes32
  approver   Approver @relation(fields: [approverId], references: [id], onDelete: Cascade)
  approverId String   @db.Char(42) // address
  weight     Decimal  @db.Decimal(79, 0) // uint256

  @@id([safeId, groupHash, approverId])
}

model Contact {
  approver   Approver @relation(fields: [approverId], references: [id])
  approverId String   @db.Char(42) // address
  addr       String   @db.Char(42) // address
  name       String

  @@id([approverId, addr])
  @@unique([approverId, name], name: "name_identifier")
}

model ContractMethod {
  contract String @db.Char(42) // address
  sighash  String @db.Char(10) // bytes4
  fragment Json

  @@id([contract, sighash])
  @@index([sighash])
}

model Tx {
  safe      Safe       @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String     @db.Char(42) // address
  hash      String     @db.Char(66) // bytes32
  ops       Op[]
  approvals Approval[]
  // comments Comment[]

  @@id([safeId, hash])
}

model Op {
  safe   Safe    @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId String  @db.Char(42) // address
  tx     Tx      @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  txHash String  @db.Char(66) // bytes32
  hash   String  @db.Char(66) // bytes32
  to     String  @db.Char(42) // address
  value  Decimal @db.Decimal(79, 0) // uint256
  data   String // bytes
  nonce  Decimal @db.Decimal(79, 0) // uint256

  @@id([safeId, txHash, hash])
}

model Approval {
  approver   Approver @relation(fields: [approverId], references: [id])
  approverId String   @db.Char(42) // address
  safe       Safe     @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId     String   @db.Char(42) // address
  tx         Tx       @relation(fields: [safeId, txHash], references: [safeId, hash], onDelete: Cascade)
  txHash     String   @db.Char(66) // bytes32
  signature  String // bytes

  @@id([safeId, txHash, approverId])
}

// model Comment {
//   id        Int      @id @default(autoincrement())
//   safe      Safe     @relation(fields: [safeId], references: [id], onDelete: Cascade)
//   safeId    String   @db.Char(42) // address
//   tx        Tx       @relation(fields: [safeId, txHash], references: [safeId, txhash], onDelete: Cascade)
//   txHash    String   @db.Char(66) // bytes32
//   author    Approver @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   authorId  String   @db.Char(42) // address
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()
//   likes     String[]
// }
