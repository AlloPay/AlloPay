datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Dedicated shadow database is required with Heroku - https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database#cloud-hosted-shadow-databases-must-be-created-manually
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../generated"
}

// https://www.npmjs.com/package/@quixo3/prisma-session-store
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Safe {
  id         String  @id
  groups     Group[]
  name       String?
  deploySalt String?
}

model Group {
  safe      Safe            @relation(fields: [safeId], references: [id], onDelete: Cascade)
  safeId    String
  hash      String
  approvers GroupApprover[]
  name      String?

  @@id([safeId, hash])
}

model Approver {
  id       String          @id
  groups   GroupApprover[]
  contacts Contact[]
}

model GroupApprover {
  group      Group    @relation(fields: [safeId, groupHash], references: [safeId, hash], onDelete: Cascade)
  safeId     String
  groupHash  String
  approver   Approver @relation(fields: [approverId], references: [id], onDelete: Cascade)
  approverId String
  weight     Decimal // Percent

  @@id([safeId, groupHash, approverId])
}

model Contact {
  approver   Approver @relation(fields: [approverId], references: [id])
  approverId String
  addr       String
  name       String

  @@id([approverId, addr])
  @@unique([approverId, name], name: "name_identifier")
}
