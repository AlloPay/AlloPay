// GENERATED by @edgedb/generate v0.5.3

import type {Executor} from "edgedb";

export type ExistingPoliciesArgs = {
  readonly "account": string;
  readonly "policyKeys": ReadonlyArray<number>;
};

export type ExistingPoliciesReturns = Array<{
  "key": number;
  "approvers": Array<{
    "address": string;
  }>;
  "threshold": number;
  "actions": Array<{
    "label": string;
    "functions": [({
      "contract": string | null;
      "selector": string | null;
      "abi": unknown | null;
    }), ...({
      "contract": string | null;
      "selector": string | null;
      "abi": unknown | null;
    })[]];
    "allow": boolean;
    "description": string | null;
  }>;
  "transfers": {
    "limits": Array<{
      "token": string;
      "amount": bigint;
      "duration": number;
    }>;
    "defaultAllow": boolean;
    "budget": number;
  };
  "allowMessages": boolean;
  "delay": number;
}>;

export function existingPolicies(client: Executor, args: ExistingPoliciesArgs): Promise<ExistingPoliciesReturns> {
  return client.query(`\
with account := (select Account filter .address = <UAddress>$account),
     keys := array_unpack(<array<uint16>>$policyKeys)
select Policy {
  key,
  approvers: { address },
  threshold,
  actions: {
    label,
    functions: {
      contract,
      selector,
      abi,
    },
    allow,
    description,
  },
  transfers: {
    limits: {
      token,
      amount,
      duration
    },
    defaultAllow,
    budget
  },
  allowMessages,
  delay,
} filter .account = account and .key in keys and 
  (.isDraft if exists .draft else .isLatest)`, args);

}
