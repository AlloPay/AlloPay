// GENERATED by @edgedb/generate v0.5.4

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $AbiSource = {
  "Verified": $.$expr_Literal<$AbiSource>;
} & $.EnumType<"default::AbiSource", ["Verified"]>;
const AbiSource: $AbiSource = $.makeType<$AbiSource>(_.spec, "29b8c64a-532c-11ef-9c9c-e19755042927", _.syntax.literal);

export type $Address = $.ScalarType<"std::str", string>;
const Address: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1b934bf7-532c-11ef-a0d1-297e320dedd2", _.syntax.literal);

export type $Amount = $.ScalarType<"std::decimal", string>;
const Amount: $.scalarTypeWithConstructor<_std.$decimal, never> = $.makeType<$.scalarTypeWithConstructor<_std.$decimal, never>>(_.spec, "29c354d1-532c-11ef-95cb-15867abd2417", _.syntax.literal);

export type $ApprovalIssue = {
  "HashMismatch": $.$expr_Literal<$ApprovalIssue>;
  "Expired": $.$expr_Literal<$ApprovalIssue>;
} & $.EnumType<"default::ApprovalIssue", ["HashMismatch", "Expired"]>;
const ApprovalIssue: $ApprovalIssue = $.makeType<$ApprovalIssue>(_.spec, "1b8a46aa-532c-11ef-b292-a5240b4fbaf2", _.syntax.literal);

export type $BoundedStr = $.ScalarType<"std::str", string>;
const BoundedStr: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1bd108f0-532c-11ef-acdd-59a9188ce706", _.syntax.literal);

export type $Bytes = $.ScalarType<"std::str", string>;
const Bytes: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1bc9909d-532c-11ef-a30e-857612986c30", _.syntax.literal);

export type $Bytes32 = $.ScalarType<"std::str", string>;
const Bytes32: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1b9caa4b-532c-11ef-99e5-773ebf5e3350", _.syntax.literal);

export type $Bytes4 = $.ScalarType<"std::str", string>;
const Bytes4: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1f25c915-532c-11ef-b6e0-275f85893ae3", _.syntax.literal);

export type $CloudProvider = {
  "Apple": $.$expr_Literal<$CloudProvider>;
  "Google": $.$expr_Literal<$CloudProvider>;
} & $.EnumType<"default::CloudProvider", ["Apple", "Google"]>;
const CloudProvider: $CloudProvider = $.makeType<$CloudProvider>(_.spec, "1c7cd22c-532c-11ef-89be-630491d94101", _.syntax.literal);

export type $MAC = $.ScalarType<"std::str", string>;
const MAC: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1c7bf2e3-532c-11ef-873c-c11ceb3f6849", _.syntax.literal);

export type $NonEmptyStr = $.ScalarType<"std::str", string>;
const NonEmptyStr: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1cafe512-532c-11ef-92e4-654bae13a511", _.syntax.literal);

export type $TransactionStatus = {
  "Pending": $.$expr_Literal<$TransactionStatus>;
  "Scheduled": $.$expr_Literal<$TransactionStatus>;
  "Executing": $.$expr_Literal<$TransactionStatus>;
  "Successful": $.$expr_Literal<$TransactionStatus>;
  "Failed": $.$expr_Literal<$TransactionStatus>;
  "Cancelled": $.$expr_Literal<$TransactionStatus>;
} & $.EnumType<"default::TransactionStatus", ["Pending", "Scheduled", "Executing", "Successful", "Failed", "Cancelled"]>;
const TransactionStatus: $TransactionStatus = $.makeType<$TransactionStatus>(_.spec, "1cb0b7e0-532c-11ef-874a-adb8911f2d69", _.syntax.literal);

export type $UAddress = $.ScalarType<"std::str", string>;
const UAddress: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1b906a9c-532c-11ef-86ba-bf02e771a056", _.syntax.literal);

export type $Url = $.ScalarType<"std::str", string>;
const Url: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1b9e0abb-532c-11ef-9410-73a04595b374", _.syntax.literal);

export type $uint16 = $.ScalarType<"std::number", number>;
const uint16: $.scalarTypeWithConstructor<_std.$number, string> = $.makeType<$.scalarTypeWithConstructor<_std.$number, string>>(_.spec, "1b95a3d6-532c-11ef-94ee-115cd9778c95", _.syntax.literal);

export type $uint224 = $.ScalarType<"std::bigint", bigint>;
const uint224: $.scalarTypeWithConstructor<_std.$bigint, never> = $.makeType<$.scalarTypeWithConstructor<_std.$bigint, never>>(_.spec, "1f2cf57a-532c-11ef-acf9-9dea038adf00", _.syntax.literal);

export type $uint256 = $.ScalarType<"std::bigint", bigint>;
const uint256: $.scalarTypeWithConstructor<_std.$bigint, never> = $.makeType<$.scalarTypeWithConstructor<_std.$bigint, never>>(_.spec, "1ca83d3e-532c-11ef-aa18-2dc5ab626c93", _.syntax.literal);

export type $uint32 = $.ScalarType<"std::number", number>;
const uint32: $.scalarTypeWithConstructor<_std.$number, string> = $.makeType<$.scalarTypeWithConstructor<_std.$number, string>>(_.spec, "1dac6c68-532c-11ef-aba9-dd2f161e4681", _.syntax.literal);

export type $uint64 = $.ScalarType<"std::bigint", bigint>;
const uint64: $.scalarTypeWithConstructor<_std.$bigint, never> = $.makeType<$.scalarTypeWithConstructor<_std.$bigint, never>>(_.spec, "29c4cdc0-532c-11ef-a77a-eb5645c68857", _.syntax.literal);

export type $LabelledλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "address": $.PropertyDesc<$UAddress, $.Cardinality.One, false, false, false, false>;
  "chain": $.PropertyDesc<_std.$str, $.Cardinality.One, false, true, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<labelled[is Approver]": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<labelled[is current_approver]": $.LinkDesc<$current_approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<labelled": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Labelled = $.ObjectType<"default::Labelled", $LabelledλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Labelled = $.makeType<$Labelled>(_.spec, "1b9f2f9b-532c-11ef-99ac-6dca29096151", _.syntax.literal);

const Labelled: $.$expr_PathNode<$.TypeSet<$Labelled, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Labelled, $.Cardinality.Many), null);

export type $AccountλShape = $.typeutil.flatten<Omit<$LabelledλShape, "address"> & {
  "address": $.PropertyDesc<$UAddress, $.Cardinality.One, true, false, false, false>;
  "activationEthFee": $.PropertyDesc<_std.$decimal, $.Cardinality.AtMostOne, false, false, false, false>;
  "upgradedAtBlock": $.PropertyDesc<_std.$bigint, $.Cardinality.AtMostOne, false, false, false, false>;
  "active": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "implementation": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "photo": $.PropertyDesc<$Url, $.Cardinality.AtMostOne, false, false, false, false>;
  "salt": $.PropertyDesc<$Bytes32, $.Cardinality.One, false, false, false, false>;
  "policies": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, true,  false, false>;
  "approvers": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, true,  false, false>;
  "messages": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, true,  false, false>;
  "proposals": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, true,  false, false>;
  "transactions": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, true,  false, false>;
  "transfers": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, true,  false, false>;
  "<account[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Message]": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryAccount[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryAccount[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Event]": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Transferlike]": $.LinkDesc<$Transferlike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is TransferApproval]": $.LinkDesc<$TransferApproval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is RemovedPolicy]": $.LinkDesc<$RemovedPolicy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<accounts[is Approver]": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<accounts[is current_approver]": $.LinkDesc<$current_approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<accounts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<accounts[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<accounts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryAccount": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Account = $.ObjectType<"default::Account", $AccountλShape, null, [
  ...$Labelled['__exclusives__'],
  {address: {__element__: $UAddress, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Account = $.makeType<$Account>(_.spec, "1ba5b6bb-532c-11ef-be59-f1848e484d77", _.syntax.literal);

const Account: $.$expr_PathNode<$.TypeSet<$Account, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Account, $.Cardinality.Many), null);

export type $ActionλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "functions": $.LinkDesc<$ActionFunction, $.Cardinality.AtLeastOne, {}, false, false,  false, false>;
  "allow": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, false>;
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "label": $.PropertyDesc<$BoundedStr, $.Cardinality.One, false, false, false, false>;
  "<actions[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<actions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Action = $.ObjectType<"default::Action", $ActionλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Action = $.makeType<$Action>(_.spec, "1f297367-532c-11ef-a581-432c1915e726", _.syntax.literal);

const Action: $.$expr_PathNode<$.TypeSet<$Action, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Action, $.Cardinality.Many), null);

export type $ActionFunctionλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "abi": $.PropertyDesc<_std.$json, $.Cardinality.AtMostOne, false, false, false, false>;
  "contract": $.PropertyDesc<$Address, $.Cardinality.AtMostOne, false, false, false, false>;
  "selector": $.PropertyDesc<$Bytes4, $.Cardinality.AtMostOne, false, false, false, false>;
  "<functions[is Action]": $.LinkDesc<$Action, $.Cardinality.Many, {}, false, false,  false, false>;
  "<functions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ActionFunction = $.ObjectType<"default::ActionFunction", $ActionFunctionλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $ActionFunction = $.makeType<$ActionFunction>(_.spec, "1f26ac18-532c-11ef-8ca0-4f0c4f6bc637", _.syntax.literal);

const ActionFunction: $.$expr_PathNode<$.TypeSet<$ActionFunction, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ActionFunction, $.Cardinality.Many), null);

export type $ProposalResponseλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "proposal": $.LinkDesc<$Proposal, $.Cardinality.One, {}, false, false,  false, false>;
  "approver": $.LinkDesc<$Approver, $.Cardinality.One, {}, false, false,  false, true>;
}>;
type $ProposalResponse = $.ObjectType<"default::ProposalResponse", $ProposalResponseλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {proposal: {__element__: $Proposal, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },approver: {__element__: $Approver, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $ProposalResponse = $.makeType<$ProposalResponse>(_.spec, "1bca75cc-532c-11ef-9b6f-5964c095f5ea", _.syntax.literal);

const ProposalResponse: $.$expr_PathNode<$.TypeSet<$ProposalResponse, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ProposalResponse, $.Cardinality.Many), null);

export type $ApprovalλShape = $.typeutil.flatten<$ProposalResponseλShape & {
  "signedHash": $.PropertyDesc<$Bytes32, $.Cardinality.One, false, false, false, false>;
  "signature": $.PropertyDesc<$Bytes, $.Cardinality.One, false, false, false, false>;
  "issues": $.PropertyDesc<$.ArrayType<$ApprovalIssue>, $.Cardinality.One, false, true, false, false>;
  "invalid": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "<approvals[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvals[is Message]": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvals[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvals": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Approval = $.ObjectType<"default::Approval", $ApprovalλShape, null, [
  ...$ProposalResponse['__exclusives__'],
]>;
const $Approval = $.makeType<$Approval>(_.spec, "1bcd8ef6-532c-11ef-8ada-b5ab88634aa2", _.syntax.literal);

const Approval: $.$expr_PathNode<$.TypeSet<$Approval, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Approval, $.Cardinality.Many), null);

export type $ApproverλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "address": $.PropertyDesc<$Address, $.Cardinality.One, true, false, false, false>;
  "labelled": $.LinkDesc<$Labelled, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "details": $.LinkDesc<$ApproverDetails, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "label": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, true, false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, true>;
  "accounts": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, true,  false, false>;
  "<approver[is ApproverDetails]": $.LinkDesc<$ApproverDetails, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<approvers[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approver[is ProposalResponse]": $.LinkDesc<$ProposalResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approver[is Approval]": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approver[is Rejection]": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy[is Message]": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approver": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Approver = $.ObjectType<"default::Approver", $ApproverλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Approver = $.makeType<$Approver>(_.spec, "1ce05781-532c-11ef-9c59-33a756f5c22b", _.syntax.literal);

const Approver: $.$expr_PathNode<$.TypeSet<$Approver, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Approver, $.Cardinality.Many), null);

export type $ApproverDetailsλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "bluetoothDevices": $.PropertyDesc<$.ArrayType<$MAC>, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<$BoundedStr, $.Cardinality.AtMostOne, false, false, false, false>;
  "cloud": $.PropertyDesc<$.NamedTupleType<{provider: $CloudProvider, subject: _std.$str}>, $.Cardinality.AtMostOne, false, false, false, false>;
  "pushToken": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "approver": $.LinkDesc<$Approver, $.Cardinality.One, {}, true, false,  false, false>;
  "<details[is Approver]": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<details[is current_approver]": $.LinkDesc<$current_approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<details": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ApproverDetails = $.ObjectType<"default::ApproverDetails", $ApproverDetailsλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {approver: {__element__: $Approver, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $ApproverDetails = $.makeType<$ApproverDetails>(_.spec, "1c7d7216-532c-11ef-a46a-3140ee7af2c7", _.syntax.literal);

const ApproverDetails: $.$expr_PathNode<$.TypeSet<$ApproverDetails, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ApproverDetails, $.Cardinality.Many), null);

export type $ResultλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "transaction": $.LinkDesc<$Transaction, $.Cardinality.One, {}, false, false,  false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "events": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, true,  false, false>;
  "transfers": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, true,  false, false>;
  "systx": $.LinkDesc<$SystemTx, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "response": $.PropertyDesc<$Bytes, $.Cardinality.One, false, false, false, true>;
  "gasUsed": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "<result[is Event]": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result[is Transferlike]": $.LinkDesc<$Transferlike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result[is TransferApproval]": $.LinkDesc<$TransferApproval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<results[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result[is SystemTx]": $.LinkDesc<$SystemTx, $.Cardinality.Many, {}, false, false,  false, false>;
  "<result": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<results": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Result = $.ObjectType<"default::Result", $ResultλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Result = $.makeType<$Result>(_.spec, "21fc7c29-532c-11ef-9181-57ac88b8e8a7", _.syntax.literal);

const Result: $.$expr_PathNode<$.TypeSet<$Result, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Result, $.Cardinality.Many), null);

export type $ConfirmedλShape = $.typeutil.flatten<$ResultλShape & {
  "block": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "ethFeePerGas": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "networkEthFee": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
}>;
type $Confirmed = $.ObjectType<"default::Confirmed", $ConfirmedλShape, null, [
  ...$Result['__exclusives__'],
]>;
const $Confirmed = $.makeType<$Confirmed>(_.spec, "2200e882-532c-11ef-bdbc-23ff28fd32b5", _.syntax.literal);

const Confirmed: $.$expr_PathNode<$.TypeSet<$Confirmed, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Confirmed, $.Cardinality.Many), null);

export type $FailureλShape = $.typeutil.flatten<$ResultλShape & {
  "reason": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $Failure = $.ObjectType<"default::Failure", $FailureλShape, null, [
  ...$Result['__exclusives__'],
]>;
const $Failure = $.makeType<$Failure>(_.spec, "228d74c7-532c-11ef-bc57-27bcfe0198fd", _.syntax.literal);

const Failure: $.$expr_PathNode<$.TypeSet<$Failure, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Failure, $.Cardinality.Many), null);

export type $ConfirmedFailureλShape = $.typeutil.flatten<$ConfirmedλShape & $FailureλShape & {
}>;
type $ConfirmedFailure = $.ObjectType<"default::ConfirmedFailure", $ConfirmedFailureλShape, null, [
  ...$Confirmed['__exclusives__'],
  ...$Failure['__exclusives__'],
]>;
const $ConfirmedFailure = $.makeType<$ConfirmedFailure>(_.spec, "22ca67de-532c-11ef-81ba-07add1592c37", _.syntax.literal);

const ConfirmedFailure: $.$expr_PathNode<$.TypeSet<$ConfirmedFailure, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ConfirmedFailure, $.Cardinality.Many), null);

export type $SuccessλShape = $.typeutil.flatten<$ResultλShape & {
}>;
type $Success = $.ObjectType<"default::Success", $SuccessλShape, null, [
  ...$Result['__exclusives__'],
]>;
const $Success = $.makeType<$Success>(_.spec, "231a632f-532c-11ef-8932-259d3254fa88", _.syntax.literal);

const Success: $.$expr_PathNode<$.TypeSet<$Success, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Success, $.Cardinality.Many), null);

export type $ConfirmedSuccessλShape = $.typeutil.flatten<$ConfirmedλShape & $SuccessλShape & {
}>;
type $ConfirmedSuccess = $.ObjectType<"default::ConfirmedSuccess", $ConfirmedSuccessλShape, null, [
  ...$Confirmed['__exclusives__'],
  ...$Success['__exclusives__'],
]>;
const $ConfirmedSuccess = $.makeType<$ConfirmedSuccess>(_.spec, "2353a0d4-532c-11ef-aebe-d510982851ed", _.syntax.literal);

const ConfirmedSuccess: $.$expr_PathNode<$.TypeSet<$ConfirmedSuccess, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ConfirmedSuccess, $.Cardinality.Many), null);

export type $UserLabelledλShape = $.typeutil.flatten<$LabelledλShape & {
}>;
type $UserLabelled = $.ObjectType<"default::UserLabelled", $UserLabelledλShape, null, [
  ...$Labelled['__exclusives__'],
]>;
const $UserLabelled = $.makeType<$UserLabelled>(_.spec, "1cd1fd2c-532c-11ef-bdb5-6191102f864f", _.syntax.literal);

const UserLabelled: $.$expr_PathNode<$.TypeSet<$UserLabelled, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($UserLabelled, $.Cardinality.Many), null);

export type $ContactλShape = $.typeutil.flatten<$UserLabelledλShape & {
  "user": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, true>;
  "name": $.PropertyDesc<$BoundedStr, $.Cardinality.One, false, false, false, false>;
  "<contacts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<contacts[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<contacts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Contact = $.ObjectType<"default::Contact", $ContactλShape, null, [
  ...$UserLabelled['__exclusives__'],
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },name: {__element__: $BoundedStr, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Contact = $.makeType<$Contact>(_.spec, "1d1c97b2-532c-11ef-9cb6-3d19927f95d9", _.syntax.literal);

const Contact: $.$expr_PathNode<$.TypeSet<$Contact, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Contact, $.Cardinality.Many), null);

export type $ContractλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "functions": $.LinkDesc<$Function, $.Cardinality.Many, {}, false, false,  false, false>;
  "address": $.PropertyDesc<$Address, $.Cardinality.One, true, false, false, false>;
}>;
type $Contract = $.ObjectType<"default::Contract", $ContractλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Contract = $.makeType<$Contract>(_.spec, "29bd7e4a-532c-11ef-871e-1f4e54f1c614", _.syntax.literal);

const Contract: $.$expr_PathNode<$.TypeSet<$Contract, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Contract, $.Cardinality.Many), null);

export type $EventλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "block": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "logIndex": $.PropertyDesc<$uint32, $.Cardinality.One, false, false, false, false>;
  "systxHash": $.PropertyDesc<$Bytes32, $.Cardinality.AtMostOne, false, false, false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "result": $.LinkDesc<$Result, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "confirmed": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "internal": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "<events[is Result]": $.LinkDesc<$Result, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is Confirmed]": $.LinkDesc<$Confirmed, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is Failure]": $.LinkDesc<$Failure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is ConfirmedFailure]": $.LinkDesc<$ConfirmedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is Success]": $.LinkDesc<$Success, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is ConfirmedSuccess]": $.LinkDesc<$ConfirmedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is OptimisticSuccess]": $.LinkDesc<$OptimisticSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is Scheduled]": $.LinkDesc<$Scheduled, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is SimulatedFailure]": $.LinkDesc<$SimulatedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events[is SimulatedSuccess]": $.LinkDesc<$SimulatedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<events": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Event = $.ObjectType<"default::Event", $EventλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Event = $.makeType<$Event>(_.spec, "1db0427c-532c-11ef-9b39-7d924d22fe0e", _.syntax.literal);

const Event: $.$expr_PathNode<$.TypeSet<$Event, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Event, $.Cardinality.Many), null);

export type $FunctionλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "selector": $.PropertyDesc<$Bytes4, $.Cardinality.One, false, false, false, false>;
  "abi": $.PropertyDesc<_std.$json, $.Cardinality.One, false, false, false, false>;
  "abiMd5": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "source": $.PropertyDesc<$AbiSource, $.Cardinality.One, false, false, false, false>;
  "<functions[is Contract]": $.LinkDesc<$Contract, $.Cardinality.Many, {}, false, false,  false, false>;
  "<functions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Function = $.ObjectType<"default::Function", $FunctionλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {abiMd5: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Function = $.makeType<$Function>(_.spec, "29b8e6ee-532c-11ef-9f92-d1ac24e6d887", _.syntax.literal);

const Function: $.$expr_PathNode<$.TypeSet<$Function, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Function, $.Cardinality.Many), null);

export type $GlobalLabelλShape = $.typeutil.flatten<$LabelledλShape & {
}>;
type $GlobalLabel = $.ObjectType<"default::GlobalLabel", $GlobalLabelλShape, null, [
  ...$Labelled['__exclusives__'],
]>;
const $GlobalLabel = $.makeType<$GlobalLabel>(_.spec, "1d98602f-532c-11ef-ad18-9bb86b0fa9c7", _.syntax.literal);

const GlobalLabel: $.$expr_PathNode<$.TypeSet<$GlobalLabel, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($GlobalLabel, $.Cardinality.Many), null);

export type $ProposalλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "hash": $.PropertyDesc<$Bytes32, $.Cardinality.One, true, false, false, false>;
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "dapp": $.PropertyDesc<$.NamedTupleType<{name: _std.$str, url: $Url, icons: $.ArrayType<$Url>}>, $.Cardinality.AtMostOne, false, false, false, false>;
  "icon": $.PropertyDesc<$Url, $.Cardinality.AtMostOne, false, false, false, false>;
  "label": $.PropertyDesc<$BoundedStr, $.Cardinality.AtMostOne, false, false, false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, false>;
  "validationErrors": $.PropertyDesc<$.ArrayType<$.NamedTupleType<{reason: _std.$str, operation: _std.$int32}>>, $.Cardinality.One, false, false, false, false>;
  "approvals": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, true,  false, false>;
  "policy": $.LinkDesc<$Policy, $.Cardinality.One, {}, false, false,  false, false>;
  "proposedBy": $.LinkDesc<$Approver, $.Cardinality.One, {}, false, false,  false, true>;
  "rejections": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, true,  false, false>;
  "<proposal[is ProposalResponse]": $.LinkDesc<$ProposalResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Approval]": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Rejection]": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposals[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposals": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Proposal = $.ObjectType<"default::Proposal", $ProposalλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {hash: {__element__: $Bytes32, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Proposal = $.makeType<$Proposal>(_.spec, "1bd1e0ae-532c-11ef-8268-cf994d1ab637", _.syntax.literal);

const Proposal: $.$expr_PathNode<$.TypeSet<$Proposal, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Proposal, $.Cardinality.Many), null);

export type $MessageλShape = $.typeutil.flatten<$ProposalλShape & {
  "signature": $.PropertyDesc<$Bytes, $.Cardinality.AtMostOne, false, false, false, false>;
  "message": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "messageHash": $.PropertyDesc<$Bytes32, $.Cardinality.One, false, false, false, false>;
  "typedData": $.PropertyDesc<_std.$json, $.Cardinality.AtMostOne, false, false, false, false>;
  "<messages[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<messages": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Message = $.ObjectType<"default::Message", $MessageλShape, null, [
  ...$Proposal['__exclusives__'],
]>;
const $Message = $.makeType<$Message>(_.spec, "1c8c87b0-532c-11ef-b4cc-2b3741cef3ab", _.syntax.literal);

const Message: $.$expr_PathNode<$.TypeSet<$Message, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Message, $.Cardinality.Many), null);

export type $OperationλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "position": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, true>;
  "data": $.PropertyDesc<$Bytes, $.Cardinality.AtMostOne, false, false, false, false>;
  "to": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "value": $.PropertyDesc<$uint256, $.Cardinality.AtMostOne, false, false, false, false>;
  "<unorderedOperations[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<operations[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<operations": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<unorderedOperations": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Operation = $.ObjectType<"default::Operation", $OperationλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Operation = $.makeType<$Operation>(_.spec, "1cac14aa-532c-11ef-8fbd-5d67ff587fcd", _.syntax.literal);

const Operation: $.$expr_PathNode<$.TypeSet<$Operation, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Operation, $.Cardinality.Many), null);

export type $OptimisticSuccessλShape = $.typeutil.flatten<$SuccessλShape & {
}>;
type $OptimisticSuccess = $.ObjectType<"default::OptimisticSuccess", $OptimisticSuccessλShape, null, [
  ...$Success['__exclusives__'],
]>;
const $OptimisticSuccess = $.makeType<$OptimisticSuccess>(_.spec, "23908e66-532c-11ef-ba7a-915a92b48df0", _.syntax.literal);

const OptimisticSuccess: $.$expr_PathNode<$.TypeSet<$OptimisticSuccess, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($OptimisticSuccess, $.Cardinality.Many), null);

export type $PaymasterFeesλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "activation": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, true>;
  "total": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "<paymasterEthFees[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<paymasterEthFees": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $PaymasterFees = $.ObjectType<"default::PaymasterFees", $PaymasterFeesλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $PaymasterFees = $.makeType<$PaymasterFees>(_.spec, "23fc33e8-532c-11ef-9594-1365eba8d39e", _.syntax.literal);

const PaymasterFees: $.$expr_PathNode<$.TypeSet<$PaymasterFees, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($PaymasterFees, $.Cardinality.Many), null);

export type $PolicyStateλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "key": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, false>;
  "activationBlock": $.PropertyDesc<_std.$bigint, $.Cardinality.AtMostOne, false, false, false, false>;
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "hasBeenActive": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "draft": $.LinkDesc<$PolicyState, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "proposal": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "initState": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "isActive": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "isDraft": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "latest": $.LinkDesc<$PolicyState, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "isLatest": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "<draft[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<draft[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latest[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latest[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<draft[is RemovedPolicy]": $.LinkDesc<$RemovedPolicy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latest[is RemovedPolicy]": $.LinkDesc<$RemovedPolicy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<draft": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latest": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $PolicyState = $.ObjectType<"default::PolicyState", $PolicyStateλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $PolicyState = $.makeType<$PolicyState>(_.spec, "1f382e7f-532c-11ef-9494-678a715a3844", _.syntax.literal);

const PolicyState: $.$expr_PathNode<$.TypeSet<$PolicyState, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($PolicyState, $.Cardinality.Many), null);

export type $PolicyλShape = $.typeutil.flatten<$PolicyStateλShape & {
  "approvers": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "hash": $.PropertyDesc<$Bytes32, $.Cardinality.One, false, false, false, false>;
  "actions": $.LinkDesc<$Action, $.Cardinality.Many, {}, false, false,  false, false>;
  "transfers": $.LinkDesc<$TransfersConfig, $.Cardinality.One, {}, false, false,  false, true>;
  "allowMessages": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "delay": $.PropertyDesc<$uint32, $.Cardinality.One, false, false, false, true>;
  "name": $.PropertyDesc<$BoundedStr, $.Cardinality.One, false, false, false, false>;
  "threshold": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, false>;
  "<policies[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy[is Message]": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, false,  false, false>;
  "<spentBy[is Transferlike]": $.LinkDesc<$Transferlike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<spentBy[is TransferApproval]": $.LinkDesc<$TransferApproval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<spentBy[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policies": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<spentBy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Policy = $.ObjectType<"default::Policy", $PolicyλShape, null, [
  ...$PolicyState['__exclusives__'],
]>;
const $Policy = $.makeType<$Policy>(_.spec, "1f7f5c94-532c-11ef-9ae7-9ddbe4b682fb", _.syntax.literal);

const Policy: $.$expr_PathNode<$.TypeSet<$Policy, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Policy, $.Cardinality.Many), null);

export type $RejectionλShape = $.typeutil.flatten<$ProposalResponseλShape & {
  "<rejections[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rejections[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rejections[is Message]": $.LinkDesc<$Message, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rejections": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Rejection = $.ObjectType<"default::Rejection", $RejectionλShape, null, [
  ...$ProposalResponse['__exclusives__'],
]>;
const $Rejection = $.makeType<$Rejection>(_.spec, "1ef79a59-532c-11ef-a210-37f17a5ac31a", _.syntax.literal);

const Rejection: $.$expr_PathNode<$.TypeSet<$Rejection, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Rejection, $.Cardinality.Many), null);

export type $RemovedPolicyλShape = $.typeutil.flatten<$PolicyStateλShape & {
}>;
type $RemovedPolicy = $.ObjectType<"default::RemovedPolicy", $RemovedPolicyλShape, null, [
  ...$PolicyState['__exclusives__'],
]>;
const $RemovedPolicy = $.makeType<$RemovedPolicy>(_.spec, "20339db6-532c-11ef-84d0-517742b0bb22", _.syntax.literal);

const RemovedPolicy: $.$expr_PathNode<$.TypeSet<$RemovedPolicy, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($RemovedPolicy, $.Cardinality.Many), null);

export type $ScheduledλShape = $.typeutil.flatten<$ResultλShape & {
  "cancelled": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "scheduledFor": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, false>;
}>;
type $Scheduled = $.ObjectType<"default::Scheduled", $ScheduledλShape, null, [
  ...$Result['__exclusives__'],
]>;
const $Scheduled = $.makeType<$Scheduled>(_.spec, "23c64270-532c-11ef-863f-6be9ed8f3416", _.syntax.literal);

const Scheduled: $.$expr_PathNode<$.TypeSet<$Scheduled, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Scheduled, $.Cardinality.Many), null);

export type $SimulatedFailureλShape = $.typeutil.flatten<$FailureλShape & {
}>;
type $SimulatedFailure = $.ObjectType<"default::SimulatedFailure", $SimulatedFailureλShape, null, [
  ...$Failure['__exclusives__'],
]>;
const $SimulatedFailure = $.makeType<$SimulatedFailure>(_.spec, "4f9ae473-532c-11ef-9611-574c1888d851", _.syntax.literal);

const SimulatedFailure: $.$expr_PathNode<$.TypeSet<$SimulatedFailure, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SimulatedFailure, $.Cardinality.Many), null);

export type $SimulatedSuccessλShape = $.typeutil.flatten<$SuccessλShape & {
}>;
type $SimulatedSuccess = $.ObjectType<"default::SimulatedSuccess", $SimulatedSuccessλShape, null, [
  ...$Success['__exclusives__'],
]>;
const $SimulatedSuccess = $.makeType<$SimulatedSuccess>(_.spec, "4fec30b2-532c-11ef-b99d-87378a8add5d", _.syntax.literal);

const SimulatedSuccess: $.$expr_PathNode<$.TypeSet<$SimulatedSuccess, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SimulatedSuccess, $.Cardinality.Many), null);

export type $SystemTxλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "proposal": $.LinkDesc<$Transaction, $.Cardinality.One, {}, false, false,  false, false>;
  "maxEthFeePerGas": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "maxNetworkEthFee": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "maxEthFees": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "ethPerFeeToken": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "hash": $.PropertyDesc<$Bytes32, $.Cardinality.One, true, false, false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "usdPerFeeToken": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "result": $.LinkDesc<$Result, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<systx[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<systxs[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is Result]": $.LinkDesc<$Result, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is Success]": $.LinkDesc<$Success, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is ConfirmedSuccess]": $.LinkDesc<$ConfirmedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is OptimisticSuccess]": $.LinkDesc<$OptimisticSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is Confirmed]": $.LinkDesc<$Confirmed, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is SimulatedFailure]": $.LinkDesc<$SimulatedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is ConfirmedFailure]": $.LinkDesc<$ConfirmedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is Failure]": $.LinkDesc<$Failure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is Scheduled]": $.LinkDesc<$Scheduled, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx[is SimulatedSuccess]": $.LinkDesc<$SimulatedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systx": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<systxs": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $SystemTx = $.ObjectType<"default::SystemTx", $SystemTxλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {hash: {__element__: $Bytes32, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $SystemTx = $.makeType<$SystemTx>(_.spec, "240891de-532c-11ef-b648-236298250cd0", _.syntax.literal);

const SystemTx: $.$expr_PathNode<$.TypeSet<$SystemTx, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SystemTx, $.Cardinality.Many), null);

export type $TokenλShape = $.typeutil.flatten<$UserLabelledλShape & {
  "units": $.PropertyDesc<$.ArrayType<$.NamedTupleType<{symbol: $NonEmptyStr, decimals: $uint16}>>, $.Cardinality.AtMostOne, false, false, false, false>;
  "address": $.PropertyDesc<$UAddress, $.Cardinality.One, false, false, false, false>;
  "symbol": $.PropertyDesc<$NonEmptyStr, $.Cardinality.One, false, false, false, false>;
  "name": $.PropertyDesc<$NonEmptyStr, $.Cardinality.One, false, false, false, false>;
  "decimals": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, false>;
  "isFeeToken": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "icon": $.PropertyDesc<$Url, $.Cardinality.AtMostOne, false, false, false, false>;
  "pythUsdPriceId": $.PropertyDesc<$Bytes32, $.Cardinality.AtMostOne, false, false, false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, true>;
  "isSystem": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "<feeToken[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<token[is Transferlike]": $.LinkDesc<$Transferlike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<token[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<token[is TransferApproval]": $.LinkDesc<$TransferApproval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<feeToken": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<token": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Token = $.ObjectType<"default::Token", $TokenλShape, null, [
  ...$UserLabelled['__exclusives__'],
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },address: {__element__: $UAddress, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Token = $.makeType<$Token>(_.spec, "1cd715f3-532c-11ef-8b31-97740f4e4723", _.syntax.literal);

const Token: $.$expr_PathNode<$.TypeSet<$Token, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Token, $.Cardinality.Many), null);

export type $TransactionλShape = $.typeutil.flatten<Omit<$ProposalλShape, "<proposal"> & {
  "maxAmount": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "gasLimit": $.PropertyDesc<$uint256, $.Cardinality.One, false, false, false, true>;
  "executable": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "unorderedOperations": $.LinkDesc<$Operation, $.Cardinality.AtLeastOne, {}, true, false,  false, false>;
  "operations": $.LinkDesc<$Operation, $.Cardinality.AtLeastOne, {}, false, true,  false, false>;
  "paymaster": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "feeToken": $.LinkDesc<$Token, $.Cardinality.One, {}, false, false,  false, false>;
  "maxAmountFp": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, true, false, false>;
  "paymasterEthFees": $.LinkDesc<$PaymasterFees, $.Cardinality.One, {}, true, false,  false, true>;
  "result": $.LinkDesc<$Result, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "status": $.PropertyDesc<$TransactionStatus, $.Cardinality.One, false, true, false, false>;
  "systx": $.LinkDesc<$SystemTx, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "results": $.LinkDesc<$Result, $.Cardinality.Many, {}, false, true,  false, false>;
  "systxs": $.LinkDesc<$SystemTx, $.Cardinality.Many, {}, false, true,  false, false>;
  "<transaction[is ConfirmedSuccess]": $.LinkDesc<$ConfirmedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is OptimisticSuccess]": $.LinkDesc<$OptimisticSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is RemovedPolicy]": $.LinkDesc<$RemovedPolicy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transactions[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is Result]": $.LinkDesc<$Result, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is Confirmed]": $.LinkDesc<$Confirmed, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is Failure]": $.LinkDesc<$Failure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is ConfirmedFailure]": $.LinkDesc<$ConfirmedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is Success]": $.LinkDesc<$Success, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is Scheduled]": $.LinkDesc<$Scheduled, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is SystemTx]": $.LinkDesc<$SystemTx, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is SimulatedFailure]": $.LinkDesc<$SimulatedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is SimulatedSuccess]": $.LinkDesc<$SimulatedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transactions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Transaction = $.ObjectType<"default::Transaction", $TransactionλShape, null, [
  ...$Proposal['__exclusives__'],
  {unorderedOperations: {__element__: $Operation, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {paymasterEthFees: {__element__: $PaymasterFees, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {result: {__element__: $Result, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {systx: {__element__: $SystemTx, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Transaction = $.makeType<$Transaction>(_.spec, "1cb0d4ea-532c-11ef-9b8b-dda17b02de15", _.syntax.literal);

const Transaction: $.$expr_PathNode<$.TypeSet<$Transaction, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transaction, $.Cardinality.Many), null);

export type $TransferlikeλShape = $.typeutil.flatten<$EventλShape & {
  "tokenAddress": $.PropertyDesc<$UAddress, $.Cardinality.One, false, false, false, false>;
  "token": $.LinkDesc<$Token, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "amount": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, false, false, false>;
  "from": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "incoming": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, false>;
  "isFeeTransfer": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "outgoing": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, false>;
  "to": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "spentBy": $.LinkDesc<$Policy, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
}>;
type $Transferlike = $.ObjectType<"default::Transferlike", $TransferlikeλShape, null, [
  ...$Event['__exclusives__'],
]>;
const $Transferlike = $.makeType<$Transferlike>(_.spec, "1dcccac7-532c-11ef-9ab0-5dca6fd5d9c4", _.syntax.literal);

const Transferlike: $.$expr_PathNode<$.TypeSet<$Transferlike, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transferlike, $.Cardinality.Many), null);

export type $TransferλShape = $.typeutil.flatten<$TransferlikeλShape & {
  "<transfers[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Confirmed]": $.LinkDesc<$Confirmed, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Result]": $.LinkDesc<$Result, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Failure]": $.LinkDesc<$Failure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is ConfirmedFailure]": $.LinkDesc<$ConfirmedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Success]": $.LinkDesc<$Success, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is ConfirmedSuccess]": $.LinkDesc<$ConfirmedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is OptimisticSuccess]": $.LinkDesc<$OptimisticSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Scheduled]": $.LinkDesc<$Scheduled, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is SimulatedFailure]": $.LinkDesc<$SimulatedFailure, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is SimulatedSuccess]": $.LinkDesc<$SimulatedSuccess, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Transfer = $.ObjectType<"default::Transfer", $TransferλShape, null, [
  ...$Transferlike['__exclusives__'],
]>;
const $Transfer = $.makeType<$Transfer>(_.spec, "1e0335e4-532c-11ef-8153-9162ae81f9a2", _.syntax.literal);

const Transfer: $.$expr_PathNode<$.TypeSet<$Transfer, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transfer, $.Cardinality.Many), null);

export type $TransferApprovalλShape = $.typeutil.flatten<$TransferlikeλShape & {
  "previous": $.LinkDesc<$TransferApproval, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "delta": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "<previous[is TransferApproval]": $.LinkDesc<$TransferApproval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<previous": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TransferApproval = $.ObjectType<"default::TransferApproval", $TransferApprovalλShape, null, [
  ...$Transferlike['__exclusives__'],
]>;
const $TransferApproval = $.makeType<$TransferApproval>(_.spec, "1e30bc21-532c-11ef-bf18-392575513a74", _.syntax.literal);

const TransferApproval: $.$expr_PathNode<$.TypeSet<$TransferApproval, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TransferApproval, $.Cardinality.Many), null);

export type $TransferLimitλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "amount": $.PropertyDesc<$uint224, $.Cardinality.One, false, false, false, false>;
  "duration": $.PropertyDesc<$uint32, $.Cardinality.One, false, false, false, false>;
  "token": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "<limits[is TransfersConfig]": $.LinkDesc<$TransfersConfig, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<limits": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TransferLimit = $.ObjectType<"default::TransferLimit", $TransferLimitλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $TransferLimit = $.makeType<$TransferLimit>(_.spec, "1f30f364-532c-11ef-97c4-6515898b2cf2", _.syntax.literal);

const TransferLimit: $.$expr_PathNode<$.TypeSet<$TransferLimit, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TransferLimit, $.Cardinality.Many), null);

export type $TransfersConfigλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "budget": $.PropertyDesc<$uint32, $.Cardinality.One, false, false, false, false>;
  "limits": $.LinkDesc<$TransferLimit, $.Cardinality.Many, {}, true, false,  false, false>;
  "defaultAllow": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "<transfers[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TransfersConfig = $.ObjectType<"default::TransfersConfig", $TransfersConfigλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {limits: {__element__: $TransferLimit, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $TransfersConfig = $.makeType<$TransfersConfig>(_.spec, "1f33c400-532c-11ef-876f-e984f968c5d2", _.syntax.literal);

const TransfersConfig: $.$expr_PathNode<$.TypeSet<$TransfersConfig, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TransfersConfig, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "primaryAccount": $.LinkDesc<$Account, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "approvers": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, true,  false, false>;
  "accounts": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, true,  false, false>;
  "contacts": $.LinkDesc<$Contact, $.Cardinality.Many, {}, false, true,  false, false>;
  "<user[is Approver]": $.LinkDesc<$Approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is current_approver]": $.LinkDesc<$current_approver, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Contact]": $.LinkDesc<$Contact, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Token]": $.LinkDesc<$Token, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $User = $.makeType<$User>(_.spec, "1d085df1-532c-11ef-b3ae-5df635234fe8", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $current_approverλShape = $.typeutil.flatten<$ApproverλShape & {
}>;
type $current_approver = $.ObjectType<"default::current_approver", $current_approverλShape, null, [
  ...$Approver['__exclusives__'],
]>;
const $current_approver = $.makeType<$current_approver>(_.spec, "1d0712bc-532c-11ef-b9a4-470de3c3b62b", _.syntax.literal);

const current_approver: $.$expr_PathNode<$.TypeSet<$current_approver, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($current_approver, $.Cardinality.Many), null);

export type $current_userλShape = $.typeutil.flatten<$UserλShape & {
}>;
type $current_user = $.ObjectType<"default::current_user", $current_userλShape, null, [
  ...$User['__exclusives__'],
]>;
const $current_user = $.makeType<$current_user>(_.spec, "1d1bd2af-532c-11ef-80c9-1707a574ee9e", _.syntax.literal);

const current_user: $.$expr_PathNode<$.TypeSet<$current_user, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($current_user, $.Cardinality.Many), null);

type as_chainλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$UAddress>>,
> = $.$expr_Function<
  _std.$str, $.cardutil.paramCardinality<P1>
>;
function as_chain<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$UAddress>>,
>(
  address: P1,
): as_chainλFuncExpr<P1>;
function as_chain(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::as_chain', args, _.spec, [
    {args: [{typeId: "1b906a9c-532c-11ef-86ba-bf02e771a056", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::as_chain",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type as_addressλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$UAddress>>,
> = $.$expr_Function<
  $Address, $.cardutil.paramCardinality<P1>
>;
function as_address<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$UAddress>>,
>(
  address: P1,
): as_addressλFuncExpr<P1>;
function as_address(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::as_address', args, _.spec, [
    {args: [{typeId: "1b906a9c-532c-11ef-86ba-bf02e771a056", optional: false, setoftype: false, variadic: false}], returnTypeId: "1b934bf7-532c-11ef-a0d1-297e320dedd2"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::as_address",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type is_member_by_idλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$uuid>>,
> = $.$expr_Function<
  _std.$bool, $.cardutil.paramCardinality<P1>
>;
function is_member_by_id<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$uuid>>,
>(
  account: P1,
): is_member_by_idλFuncExpr<P1>;
function is_member_by_id(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::is_member_by_id', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000100", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000109"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::is_member_by_id",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type as_fixedλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$uint16>>,
> = $.$expr_Function<
  _std.$bigint, $.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>
>;
function as_fixed<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$uint16>>,
>(
  value: P1,
  decimals: P2,
): as_fixedλFuncExpr<P1, P2>;
function as_fixed(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::as_fixed', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000108", optional: false, setoftype: false, variadic: false}, {typeId: "1b95a3d6-532c-11ef-94ee-115cd9778c95", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000110"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::as_fixed",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type is_memberλFuncExpr<
  P1 extends $.TypeSet<$Account>,
> = $.$expr_Function<
  _std.$bool, $.cardutil.paramCardinality<P1>
>;
function is_member<
  P1 extends $.TypeSet<$Account>,
>(
  account: P1,
): is_memberλFuncExpr<P1>;
function is_member(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::is_member', args, _.spec, [
    {args: [{typeId: "1ba5b6bb-532c-11ef-be59-f1848e484d77", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000109"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::is_member",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type as_decimalλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$bigint>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$uint16>>,
> = $.$expr_Function<
  _std.$decimal, $.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>
>;
function as_decimal<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$bigint>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$uint16>>,
>(
  value: P1,
  decimals: P2,
): as_decimalλFuncExpr<P1, P2>;
function as_decimal(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::as_decimal', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000110", optional: false, setoftype: false, variadic: false}, {typeId: "1b95a3d6-532c-11ef-94ee-115cd9778c95", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000108"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::as_decimal",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type latestPolicyλFuncExpr<
  P1 extends $.TypeSet<$Account>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$number>>,
> = $.$expr_Function<
  $Policy, $.cardutil.overrideLowerBound<$.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>, "Zero">
>;
function latestPolicy<
  P1 extends $.TypeSet<$Account>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$number>>,
>(
  account: P1,
  key: P2,
): latestPolicyλFuncExpr<P1, P2>;
function latestPolicy(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::latestPolicy', args, _.spec, [
    {args: [{typeId: "1ba5b6bb-532c-11ef-be59-f1848e484d77", optional: false, setoftype: false, variadic: false}, {typeId: "00000000-0000-0000-0000-0000000001ff", optional: false, setoftype: false, variadic: false}], returnTypeId: "1f7f5c94-532c-11ef-9ae7-9ddbe4b682fb", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::latestPolicy",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type tokenForUserλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends $.TypeSet<$User>,
> = $.$expr_Function<
  $Token, $.cardutil.overrideLowerBound<$.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>, "Zero">
>;
function tokenForUser<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends $.TypeSet<$User>,
>(
  addressParam: P1,
  user: P2,
): tokenForUserλFuncExpr<P1, P2>;
function tokenForUser(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::tokenForUser', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}, {typeId: "1d085df1-532c-11ef-b3ae-5df635234fe8", optional: false, setoftype: false, variadic: false}], returnTypeId: "1cd715f3-532c-11ef-8b31-97740f4e4723", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::tokenForUser",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type tokenλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  $Token, $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
>;
function token<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  address: P1,
): tokenλFuncExpr<P1>;
function token(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::token', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "1cd715f3-532c-11ef-8b31-97740f4e4723", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::token",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type labelλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  _std.$str, $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
>;
function label<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  address: P1,
): labelλFuncExpr<P1>;
function label(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::label', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::label",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type labelForUserλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends $.TypeSet<$User>,
> = $.$expr_Function<
  _std.$str, $.cardutil.overrideLowerBound<$.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>, "Zero">
>;
function labelForUser<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends $.TypeSet<$User>,
>(
  addressParam: P1,
  user: P2,
): labelForUserλFuncExpr<P1, P2>;
function labelForUser(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::labelForUser', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}, {typeId: "1d085df1-532c-11ef-b3ae-5df635234fe8", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::labelForUser",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

const $default__globals: {  current_accounts: _.syntax.$expr_Global<
              // "default::current_accounts",
              $.ArrayType<_std.$uuid>,
              $.Cardinality.AtMostOne
              >,  current_approver: _.syntax.$expr_Global<
              // "default::current_approver",
              $current_approver,
              $.Cardinality.AtMostOne
              >,  current_approver_address: _.syntax.$expr_Global<
              // "default::current_approver_address",
              $Address,
              $.Cardinality.AtMostOne
              >,  current_user: _.syntax.$expr_Global<
              // "default::current_user",
              $current_user,
              $.Cardinality.AtMostOne
              >} = {  current_accounts: _.syntax.makeGlobal(
              "default::current_accounts",
              $.makeType(_.spec, "1378c9c3-b11a-5a95-bdac-066a4143094d", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_approver: _.syntax.makeGlobal(
              "default::current_approver",
              $.makeType(_.spec, "1d0712bc-532c-11ef-b9a4-470de3c3b62b", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_approver_address: _.syntax.makeGlobal(
              "default::current_approver_address",
              $.makeType(_.spec, "1b934bf7-532c-11ef-a0d1-297e320dedd2", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_user: _.syntax.makeGlobal(
              "default::current_user",
              $.makeType(_.spec, "1d1bd2af-532c-11ef-80c9-1707a574ee9e", _.syntax.literal),
              $.Cardinality.AtMostOne) as any};



export { AbiSource, Address, Amount, ApprovalIssue, BoundedStr, Bytes, Bytes32, Bytes4, CloudProvider, MAC, NonEmptyStr, TransactionStatus, UAddress, Url, uint16, uint224, uint256, uint32, uint64, $Labelled, Labelled, $Account, Account, $Action, Action, $ActionFunction, ActionFunction, $ProposalResponse, ProposalResponse, $Approval, Approval, $Approver, Approver, $ApproverDetails, ApproverDetails, $Result, Result, $Confirmed, Confirmed, $Failure, Failure, $ConfirmedFailure, ConfirmedFailure, $Success, Success, $ConfirmedSuccess, ConfirmedSuccess, $UserLabelled, UserLabelled, $Contact, Contact, $Contract, Contract, $Event, Event, $Function, Function, $GlobalLabel, GlobalLabel, $Proposal, Proposal, $Message, Message, $Operation, Operation, $OptimisticSuccess, OptimisticSuccess, $PaymasterFees, PaymasterFees, $PolicyState, PolicyState, $Policy, Policy, $Rejection, Rejection, $RemovedPolicy, RemovedPolicy, $Scheduled, Scheduled, $SimulatedFailure, SimulatedFailure, $SimulatedSuccess, SimulatedSuccess, $SystemTx, SystemTx, $Token, Token, $Transaction, Transaction, $Transferlike, Transferlike, $Transfer, Transfer, $TransferApproval, TransferApproval, $TransferLimit, TransferLimit, $TransfersConfig, TransfersConfig, $User, User, $current_approver, current_approver, $current_user, current_user };

type __defaultExports = {
  "AbiSource": typeof AbiSource;
  "Address": typeof Address;
  "Amount": typeof Amount;
  "ApprovalIssue": typeof ApprovalIssue;
  "BoundedStr": typeof BoundedStr;
  "Bytes": typeof Bytes;
  "Bytes32": typeof Bytes32;
  "Bytes4": typeof Bytes4;
  "CloudProvider": typeof CloudProvider;
  "MAC": typeof MAC;
  "NonEmptyStr": typeof NonEmptyStr;
  "TransactionStatus": typeof TransactionStatus;
  "UAddress": typeof UAddress;
  "Url": typeof Url;
  "uint16": typeof uint16;
  "uint224": typeof uint224;
  "uint256": typeof uint256;
  "uint32": typeof uint32;
  "uint64": typeof uint64;
  "Labelled": typeof Labelled;
  "Account": typeof Account;
  "Action": typeof Action;
  "ActionFunction": typeof ActionFunction;
  "ProposalResponse": typeof ProposalResponse;
  "Approval": typeof Approval;
  "Approver": typeof Approver;
  "ApproverDetails": typeof ApproverDetails;
  "Result": typeof Result;
  "Confirmed": typeof Confirmed;
  "Failure": typeof Failure;
  "ConfirmedFailure": typeof ConfirmedFailure;
  "Success": typeof Success;
  "ConfirmedSuccess": typeof ConfirmedSuccess;
  "UserLabelled": typeof UserLabelled;
  "Contact": typeof Contact;
  "Contract": typeof Contract;
  "Event": typeof Event;
  "Function": typeof Function;
  "GlobalLabel": typeof GlobalLabel;
  "Proposal": typeof Proposal;
  "Message": typeof Message;
  "Operation": typeof Operation;
  "OptimisticSuccess": typeof OptimisticSuccess;
  "PaymasterFees": typeof PaymasterFees;
  "PolicyState": typeof PolicyState;
  "Policy": typeof Policy;
  "Rejection": typeof Rejection;
  "RemovedPolicy": typeof RemovedPolicy;
  "Scheduled": typeof Scheduled;
  "SimulatedFailure": typeof SimulatedFailure;
  "SimulatedSuccess": typeof SimulatedSuccess;
  "SystemTx": typeof SystemTx;
  "Token": typeof Token;
  "Transaction": typeof Transaction;
  "Transferlike": typeof Transferlike;
  "Transfer": typeof Transfer;
  "TransferApproval": typeof TransferApproval;
  "TransferLimit": typeof TransferLimit;
  "TransfersConfig": typeof TransfersConfig;
  "User": typeof User;
  "current_approver": typeof current_approver;
  "current_user": typeof current_user;
  "as_chain": typeof as_chain;
  "as_address": typeof as_address;
  "is_member_by_id": typeof is_member_by_id;
  "as_fixed": typeof as_fixed;
  "is_member": typeof is_member;
  "as_decimal": typeof as_decimal;
  "latestPolicy": typeof latestPolicy;
  "tokenForUser": typeof tokenForUser;
  "token": typeof token;
  "label": typeof label;
  "labelForUser": typeof labelForUser;
  "global": typeof $default__globals
};
const __defaultExports: __defaultExports = {
  "AbiSource": AbiSource,
  "Address": Address,
  "Amount": Amount,
  "ApprovalIssue": ApprovalIssue,
  "BoundedStr": BoundedStr,
  "Bytes": Bytes,
  "Bytes32": Bytes32,
  "Bytes4": Bytes4,
  "CloudProvider": CloudProvider,
  "MAC": MAC,
  "NonEmptyStr": NonEmptyStr,
  "TransactionStatus": TransactionStatus,
  "UAddress": UAddress,
  "Url": Url,
  "uint16": uint16,
  "uint224": uint224,
  "uint256": uint256,
  "uint32": uint32,
  "uint64": uint64,
  "Labelled": Labelled,
  "Account": Account,
  "Action": Action,
  "ActionFunction": ActionFunction,
  "ProposalResponse": ProposalResponse,
  "Approval": Approval,
  "Approver": Approver,
  "ApproverDetails": ApproverDetails,
  "Result": Result,
  "Confirmed": Confirmed,
  "Failure": Failure,
  "ConfirmedFailure": ConfirmedFailure,
  "Success": Success,
  "ConfirmedSuccess": ConfirmedSuccess,
  "UserLabelled": UserLabelled,
  "Contact": Contact,
  "Contract": Contract,
  "Event": Event,
  "Function": Function,
  "GlobalLabel": GlobalLabel,
  "Proposal": Proposal,
  "Message": Message,
  "Operation": Operation,
  "OptimisticSuccess": OptimisticSuccess,
  "PaymasterFees": PaymasterFees,
  "PolicyState": PolicyState,
  "Policy": Policy,
  "Rejection": Rejection,
  "RemovedPolicy": RemovedPolicy,
  "Scheduled": Scheduled,
  "SimulatedFailure": SimulatedFailure,
  "SimulatedSuccess": SimulatedSuccess,
  "SystemTx": SystemTx,
  "Token": Token,
  "Transaction": Transaction,
  "Transferlike": Transferlike,
  "Transfer": Transfer,
  "TransferApproval": TransferApproval,
  "TransferLimit": TransferLimit,
  "TransfersConfig": TransfersConfig,
  "User": User,
  "current_approver": current_approver,
  "current_user": current_user,
  "as_chain": as_chain,
  "as_address": as_address,
  "is_member_by_id": is_member_by_id,
  "as_fixed": as_fixed,
  "is_member": is_member,
  "as_decimal": as_decimal,
  "latestPolicy": latestPolicy,
  "tokenForUser": tokenForUser,
  "token": token,
  "label": label,
  "labelForUser": labelForUser,
  "global": $default__globals
};
export default __defaultExports;
