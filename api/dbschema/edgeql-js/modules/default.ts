// GENERATED by @edgedb/generate v0.1.0
// Run 'npx @edgedb/generate edgeql-js' to re-generate

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $AbiSource = {
  "Verified": $.$expr_Literal<$AbiSource>;
} & $.EnumType<"default::AbiSource", ["Verified"]>;
const AbiSource: $AbiSource = $.makeType<$AbiSource>(_.spec, "12152726-04f3-11ee-ad14-a3c763da37f4", _.syntax.literal);

export type $Address = $.ScalarType<"std::str", string>;
const Address: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "0fe401b6-04f3-11ee-aaef-85a7bcfe4ddb", _.syntax.literal);

export type $Bytes = $.ScalarType<"std::str", string>;
const Bytes: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1018f527-04f3-11ee-a2e0-f96d7036b426", _.syntax.literal);

export type $Bytes32 = $.ScalarType<"std::str", string>;
const Bytes32: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "1007d8a5-04f3-11ee-93f5-d79b4acd3177", _.syntax.literal);

export type $Bytes4 = $.ScalarType<"std::str", string>;
const Bytes4: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "12154557-04f3-11ee-a900-f34202aae858", _.syntax.literal);

export type $Name = $.ScalarType<"std::str", string>;
const Name: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "0fe50ada-04f3-11ee-8509-9156d825e92f", _.syntax.literal);

export type $TargetSelector = $.ScalarType<"std::str", string>;
const TargetSelector: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "0fde7912-04f3-11ee-8d96-1157ad803a5e", _.syntax.literal);

export type $TransactionProposalStatus = {
  "Pending": $.$expr_Literal<$TransactionProposalStatus>;
  "Executing": $.$expr_Literal<$TransactionProposalStatus>;
  "Successful": $.$expr_Literal<$TransactionProposalStatus>;
  "Failed": $.$expr_Literal<$TransactionProposalStatus>;
} & $.EnumType<"default::TransactionProposalStatus", ["Pending", "Executing", "Successful", "Failed"]>;
const TransactionProposalStatus: $TransactionProposalStatus = $.makeType<$TransactionProposalStatus>(_.spec, "112cc8eb-04f3-11ee-a695-a34a3e6a5260", _.syntax.literal);

export type $TransferDirection = {
  "In": $.$expr_Literal<$TransferDirection>;
  "Out": $.$expr_Literal<$TransferDirection>;
} & $.EnumType<"default::TransferDirection", ["In", "Out"]>;
const TransferDirection: $TransferDirection = $.makeType<$TransferDirection>(_.spec, "1118158f-04f3-11ee-b698-ed28fce8118c", _.syntax.literal);

export type $current_user_accounts = $.ScalarType<"std::uuid", string>;
const current_user_accounts: $.scalarTypeWithConstructor<_std.$uuid, never> = $.makeType<$.scalarTypeWithConstructor<_std.$uuid, never>>(_.spec, "1007a91b-04f3-11ee-9351-ef358182abb7", _.syntax.literal);

export type $uint16 = $.ScalarType<"std::number", number>;
const uint16: $.scalarTypeWithConstructor<_std.$number, string> = $.makeType<$.scalarTypeWithConstructor<_std.$number, string>>(_.spec, "118e4844-04f3-11ee-a183-2b1827b30cf3", _.syntax.literal);

export type $uint256 = $.ScalarType<"std::bigint", bigint>;
const uint256: $.scalarTypeWithConstructor<_std.$bigint, never> = $.makeType<$.scalarTypeWithConstructor<_std.$bigint, never>>(_.spec, "10a27ac3-04f3-11ee-96aa-f75561003e0d", _.syntax.literal);

export type $uint64 = $.ScalarType<"std::bigint", bigint>;
const uint64: $.scalarTypeWithConstructor<_std.$bigint, never> = $.makeType<$.scalarTypeWithConstructor<_std.$bigint, never>>(_.spec, "112ce8a9-04f3-11ee-ba44-e3bfaac730bd", _.syntax.literal);

export type $UserλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "address": $.PropertyDesc<$Address, $.Cardinality.One, true, false, false, false>;
  "name": $.PropertyDesc<$Name, $.Cardinality.AtMostOne, false, false, false, false>;
  "pushToken": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "contacts": $.LinkDesc<$Contact, $.Cardinality.Many, {}, false, true,  false, false>;
  "<user[is Contact]": $.LinkDesc<$Contact, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is ProposalResponse]": $.LinkDesc<$ProposalResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Approval]": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Rejection]": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposedBy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $User = $.makeType<$User>(_.spec, "0fec13b8-04f3-11ee-9960-e9687c492e75", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $AccountλShape = $.typeutil.flatten<$UserλShape & {
  "implementation": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "isActive": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, false>;
  "salt": $.PropertyDesc<$Bytes32, $.Cardinality.One, false, false, false, false>;
  "policies": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, true,  false, false>;
  "proposals": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, true,  false, false>;
  "transactionProposals": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, true,  false, false>;
  "transfers": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, true,  false, false>;
  "<account[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is TransferDetails]": $.LinkDesc<$TransferDetails, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<account": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Account = $.ObjectType<"default::Account", $AccountλShape, null, [
  ...$User['__exclusives__'],
]>;
const $Account = $.makeType<$Account>(_.spec, "1008b767-04f3-11ee-9886-11e2f5378eb0", _.syntax.literal);

const Account: $.$expr_PathNode<$.TypeSet<$Account, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Account, $.Cardinality.Many), null);

export type $ProposalResponseλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, true, true>;
  "proposal": $.LinkDesc<$Proposal, $.Cardinality.One, {}, false, false,  false, false>;
  "<responses[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<responses[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<responses": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ProposalResponse = $.ObjectType<"default::ProposalResponse", $ProposalResponseλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {proposal: {__element__: $Proposal, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $ProposalResponse = $.makeType<$ProposalResponse>(_.spec, "1019e2f7-04f3-11ee-891b-ef5720ae31d6", _.syntax.literal);

const ProposalResponse: $.$expr_PathNode<$.TypeSet<$ProposalResponse, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ProposalResponse, $.Cardinality.Many), null);

export type $ApprovalλShape = $.typeutil.flatten<$ProposalResponseλShape & {
  "signature": $.PropertyDesc<$Bytes, $.Cardinality.One, false, false, false, false>;
  "<approvals[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvals[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<approvals": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Approval = $.ObjectType<"default::Approval", $ApprovalλShape, null, [
  ...$ProposalResponse['__exclusives__'],
]>;
const $Approval = $.makeType<$Approval>(_.spec, "1031b402-04f3-11ee-994e-edcb9d1908be", _.syntax.literal);

const Approval: $.$expr_PathNode<$.TypeSet<$Approval, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Approval, $.Cardinality.Many), null);

export type $ContactλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "name": $.PropertyDesc<$Name, $.Cardinality.One, false, false, false, false>;
  "address": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "<contacts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<contacts[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<contacts[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<contacts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Contact = $.ObjectType<"default::Contact", $ContactλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },name: {__element__: $Name, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Contact = $.makeType<$Contact>(_.spec, "0ff2ecb8-04f3-11ee-9918-d9edb83a6938", _.syntax.literal);

const Contact: $.$expr_PathNode<$.TypeSet<$Contact, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Contact, $.Cardinality.Many), null);

export type $ContractλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "functions": $.LinkDesc<$Function, $.Cardinality.Many, {}, false, false,  false, false>;
  "address": $.PropertyDesc<$Address, $.Cardinality.One, true, false, false, false>;
}>;
type $Contract = $.ObjectType<"default::Contract", $ContractλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {address: {__element__: $Address, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Contract = $.makeType<$Contract>(_.spec, "121b8009-04f3-11ee-bd4e-e9066c2c8e72", _.syntax.literal);

const Contract: $.$expr_PathNode<$.TypeSet<$Contract, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Contract, $.Cardinality.Many), null);

export type $FunctionλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "selector": $.PropertyDesc<$Bytes4, $.Cardinality.One, false, false, false, false>;
  "abi": $.PropertyDesc<_std.$json, $.Cardinality.One, false, false, false, false>;
  "abiMd5": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "source": $.PropertyDesc<$AbiSource, $.Cardinality.One, false, false, false, false>;
  "<functions[is Contract]": $.LinkDesc<$Contract, $.Cardinality.Many, {}, false, false,  false, false>;
  "<functions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Function = $.ObjectType<"default::Function", $FunctionλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {abiMd5: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Function = $.makeType<$Function>(_.spec, "12165094-04f3-11ee-9e41-6b724d238d85", _.syntax.literal);

const Function: $.$expr_PathNode<$.TypeSet<$Function, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Function, $.Cardinality.Many), null);

export type $OperationλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "data": $.PropertyDesc<$Bytes, $.Cardinality.AtMostOne, false, false, false, false>;
  "to": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "value": $.PropertyDesc<$uint256, $.Cardinality.AtMostOne, false, false, false, false>;
  "<operations[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<operations": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Operation = $.ObjectType<"default::Operation", $OperationλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $Operation = $.makeType<$Operation>(_.spec, "10a7a24d-04f3-11ee-866e-23fc97fea62d", _.syntax.literal);

const Operation: $.$expr_PathNode<$.TypeSet<$Operation, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Operation, $.Cardinality.Many), null);

export type $PolicyλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "name": $.PropertyDesc<$Name, $.Cardinality.One, false, false, false, false>;
  "key": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, false>;
  "stateHistory": $.LinkDesc<$PolicyState, $.Cardinality.AtLeastOne, {}, true, false,  false, false>;
  "state": $.LinkDesc<$PolicyState, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "isActive": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "draft": $.LinkDesc<$PolicyState, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<policy[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policies[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policies": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<policy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Policy = $.ObjectType<"default::Policy", $PolicyλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {account: {__element__: $Account, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },name: {__element__: $Name, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {account: {__element__: $Account, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },key: {__element__: $uint16, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {stateHistory: {__element__: $PolicyState, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Policy = $.makeType<$Policy>(_.spec, "119396a5-04f3-11ee-badc-410cb4867a3b", _.syntax.literal);

const Policy: $.$expr_PathNode<$.TypeSet<$Policy, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Policy, $.Cardinality.Many), null);

export type $PolicyStateλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "activationBlock": $.PropertyDesc<_std.$bigint, $.Cardinality.AtMostOne, false, false, false, false>;
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, true, true>;
  "approvers": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "proposal": $.LinkDesc<$TransactionProposal, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "isAccountInitState": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "targets": $.LinkDesc<$Target, $.Cardinality.Many, {}, false, false,  false, false>;
  "isRemoved": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "threshold": $.PropertyDesc<$uint16, $.Cardinality.One, false, false, false, false>;
  "policy": $.LinkDesc<$Policy, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<stateHistory[is Policy]": $.LinkDesc<$Policy, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<state[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<draft[is Policy]": $.LinkDesc<$Policy, $.Cardinality.Many, {}, false, false,  false, false>;
  "<draft": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<state": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<stateHistory": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $PolicyState = $.ObjectType<"default::PolicyState", $PolicyStateλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $PolicyState = $.makeType<$PolicyState>(_.spec, "11bd6460-04f3-11ee-9f0f-23f690d57cb3", _.syntax.literal);

const PolicyState: $.$expr_PathNode<$.TypeSet<$PolicyState, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($PolicyState, $.Cardinality.Many), null);

export type $ProposalλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "label": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "proposedBy": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  true, true>;
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, true, true>;
  "hash": $.PropertyDesc<$Bytes32, $.Cardinality.One, true, false, false, false>;
  "approvals": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, true,  false, false>;
  "rejections": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, true,  false, false>;
  "responses": $.LinkDesc<$ProposalResponse, $.Cardinality.Many, {}, false, true,  false, false>;
  "policy": $.LinkDesc<$Policy, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<proposal[is ProposalResponse]": $.LinkDesc<$ProposalResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Approval]": $.LinkDesc<$Approval, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Rejection]": $.LinkDesc<$Rejection, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposals[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposals": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Proposal = $.ObjectType<"default::Proposal", $ProposalλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {hash: {__element__: $Bytes32, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Proposal = $.makeType<$Proposal>(_.spec, "103fcc90-04f3-11ee-a09d-37f45c222a9c", _.syntax.literal);

const Proposal: $.$expr_PathNode<$.TypeSet<$Proposal, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Proposal, $.Cardinality.Many), null);

export type $ReceiptλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "responses": $.PropertyDesc<$.ArrayType<$Bytes>, $.Cardinality.One, false, false, false, false>;
  "block": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "fee": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "gasUsed": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "success": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "transfers": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, true,  false, false>;
  "<receipt[is Transfer]": $.LinkDesc<$Transfer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<receipt[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<receipt": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Receipt = $.ObjectType<"default::Receipt", $ReceiptλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $Receipt = $.makeType<$Receipt>(_.spec, "11de4358-04f3-11ee-a7ad-01fd45c5c62f", _.syntax.literal);

const Receipt: $.$expr_PathNode<$.TypeSet<$Receipt, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Receipt, $.Cardinality.Many), null);

export type $RejectionλShape = $.typeutil.flatten<$ProposalResponseλShape & {
  "<rejections[is Proposal]": $.LinkDesc<$Proposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rejections[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rejections": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Rejection = $.ObjectType<"default::Rejection", $RejectionλShape, null, [
  ...$ProposalResponse['__exclusives__'],
]>;
const $Rejection = $.makeType<$Rejection>(_.spec, "1087c8f2-04f3-11ee-82ee-c7309a4aa05a", _.syntax.literal);

const Rejection: $.$expr_PathNode<$.TypeSet<$Rejection, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Rejection, $.Cardinality.Many), null);

export type $SimulationλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "transfers": $.LinkDesc<$TransferDetails, $.Cardinality.Many, {}, false, false,  false, false>;
  "<simulation[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<simulation": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Simulation = $.ObjectType<"default::Simulation", $SimulationλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $Simulation = $.makeType<$Simulation>(_.spec, "1129aa92-04f3-11ee-a7d1-3d844086e3ea", _.syntax.literal);

const Simulation: $.$expr_PathNode<$.TypeSet<$Simulation, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Simulation, $.Cardinality.Many), null);

export type $TargetλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "selectors": $.PropertyDesc<$.ArrayType<$TargetSelector>, $.Cardinality.One, false, false, false, false>;
  "to": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<targets[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<targets": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Target = $.ObjectType<"default::Target", $TargetλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $Target = $.makeType<$Target>(_.spec, "0fdf8e59-04f3-11ee-b67f-cd56194a05e9", _.syntax.literal);

const Target: $.$expr_PathNode<$.TypeSet<$Target, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Target, $.Cardinality.Many), null);

export type $TransactionλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "submittedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, true, true>;
  "gasPrice": $.PropertyDesc<$uint256, $.Cardinality.One, false, false, false, false>;
  "hash": $.PropertyDesc<$Bytes32, $.Cardinality.One, true, false, false, false>;
  "proposal": $.LinkDesc<$TransactionProposal, $.Cardinality.One, {}, false, false,  false, false>;
  "receipt": $.LinkDesc<$Receipt, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<transactions[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction[is TransactionProposal]": $.LinkDesc<$TransactionProposal, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transaction": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transactions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Transaction = $.ObjectType<"default::Transaction", $TransactionλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
  {hash: {__element__: $Bytes32, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Transaction = $.makeType<$Transaction>(_.spec, "10aa9525-04f3-11ee-831d-a3b7c9cc31a2", _.syntax.literal);

const Transaction: $.$expr_PathNode<$.TypeSet<$Transaction, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transaction, $.Cardinality.Many), null);

export type $TransactionProposalλShape = $.typeutil.flatten<Omit<$ProposalλShape, "<proposal"> & {
  "operations": $.LinkDesc<$Operation, $.Cardinality.AtLeastOne, {}, true, false,  false, false>;
  "simulation": $.LinkDesc<$Simulation, $.Cardinality.One, {}, false, false,  false, false>;
  "feeToken": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "gasLimit": $.PropertyDesc<$uint256, $.Cardinality.One, false, false, false, true>;
  "nonce": $.PropertyDesc<$uint64, $.Cardinality.One, false, false, false, false>;
  "transactions": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, true,  false, false>;
  "transaction": $.LinkDesc<$Transaction, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "status": $.PropertyDesc<$TransactionProposalStatus, $.Cardinality.One, false, true, false, false>;
  "<proposal[is PolicyState]": $.LinkDesc<$PolicyState, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal[is Transaction]": $.LinkDesc<$Transaction, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transactionProposals[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<proposal": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transactionProposals": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TransactionProposal = $.ObjectType<"default::TransactionProposal", $TransactionProposalλShape, null, [
  ...$Proposal['__exclusives__'],
  {operations: {__element__: $Operation, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $TransactionProposal = $.makeType<$TransactionProposal>(_.spec, "113212ac-04f3-11ee-8e6b-1369baed5c86", _.syntax.literal);

const TransactionProposal: $.$expr_PathNode<$.TypeSet<$TransactionProposal, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TransactionProposal, $.Cardinality.Many), null);

export type $TransferDetailsλShape = $.typeutil.flatten<_std.$Object_fe84743ee09e11edb375672f3ae9cdcdλShape & {
  "account": $.LinkDesc<$Account, $.Cardinality.One, {}, false, false,  false, false>;
  "amount": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "direction": $.PropertyDesc<$TransferDirection, $.Cardinality.One, false, false, false, false>;
  "from": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "to": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "token": $.PropertyDesc<$Address, $.Cardinality.One, false, false, false, false>;
  "<transfers[is Simulation]": $.LinkDesc<$Simulation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TransferDetails = $.ObjectType<"default::TransferDetails", $TransferDetailsλShape, null, [
  ..._std.$Object_fe84743ee09e11edb375672f3ae9cdcd['__exclusives__'],
]>;
const $TransferDetails = $.makeType<$TransferDetails>(_.spec, "111835d1-04f3-11ee-8967-b11bc31a0ae1", _.syntax.literal);

const TransferDetails: $.$expr_PathNode<$.TypeSet<$TransferDetails, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TransferDetails, $.Cardinality.Many), null);

export type $TransferλShape = $.typeutil.flatten<Omit<$TransferDetailsλShape, "<transfers"> & {
  "block": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "logIndex": $.PropertyDesc<_std.$int32, $.Cardinality.One, false, false, false, false>;
  "timestamp": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "receipt": $.LinkDesc<$Receipt, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<transfers[is Receipt]": $.LinkDesc<$Receipt, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers[is Account]": $.LinkDesc<$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<transfers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Transfer = $.ObjectType<"default::Transfer", $TransferλShape, null, [
  ...$TransferDetails['__exclusives__'],
  {block: {__element__: _std.$bigint, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },logIndex: {__element__: _std.$int32, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Transfer = $.makeType<$Transfer>(_.spec, "117b972a-04f3-11ee-9365-230ae2c7d2c1", _.syntax.literal);

const Transfer: $.$expr_PathNode<$.TypeSet<$Transfer, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transfer, $.Cardinality.Many), null);

export type $current_userλShape = $.typeutil.flatten<$UserλShape & {
}>;
type $current_user = $.ObjectType<"default::current_user", $current_userλShape, null, [
  ...$User['__exclusives__'],
]>;
const $current_user = $.makeType<$current_user>(_.spec, "100644c9-04f3-11ee-9159-a1a8c46a71a7", _.syntax.literal);

const current_user: $.$expr_PathNode<$.TypeSet<$current_user, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($current_user, $.Cardinality.Many), null);

const $default__globals: {  current_user: _.syntax.$expr_Global<
              // "default::current_user",
              $current_user,
              $.Cardinality.AtMostOne
              >,  current_user_accounts: _.syntax.$expr_Global<
              // "default::current_user_accounts",
              $current_user_accounts,
              $.Cardinality.Many
              >,  current_user_accounts_array: _.syntax.$expr_Global<
              // "default::current_user_accounts_array",
              $.ArrayType<_std.$uuid>,
              $.Cardinality.AtMostOne
              >,  current_user_address: _.syntax.$expr_Global<
              // "default::current_user_address",
              $Address,
              $.Cardinality.AtMostOne
              >} = {  current_user: _.syntax.makeGlobal(
              "default::current_user",
              $.makeType(_.spec, "100644c9-04f3-11ee-9159-a1a8c46a71a7", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_user_accounts: _.syntax.makeGlobal(
              "default::current_user_accounts",
              $.makeType(_.spec, "1007a91b-04f3-11ee-9351-ef358182abb7", _.syntax.literal),
              $.Cardinality.Many) as any,  current_user_accounts_array: _.syntax.makeGlobal(
              "default::current_user_accounts_array",
              $.makeType(_.spec, "d2a2fc36-29e2-20f2-9861-9f2633371c73", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_user_address: _.syntax.makeGlobal(
              "default::current_user_address",
              $.makeType(_.spec, "0fe401b6-04f3-11ee-aaef-85a7bcfe4ddb", _.syntax.literal),
              $.Cardinality.AtMostOne) as any};



export { AbiSource, Address, Bytes, Bytes32, Bytes4, Name, TargetSelector, TransactionProposalStatus, TransferDirection, current_user_accounts, uint16, uint256, uint64, $User, User, $Account, Account, $ProposalResponse, ProposalResponse, $Approval, Approval, $Contact, Contact, $Contract, Contract, $Function, Function, $Operation, Operation, $Policy, Policy, $PolicyState, PolicyState, $Proposal, Proposal, $Receipt, Receipt, $Rejection, Rejection, $Simulation, Simulation, $Target, Target, $Transaction, Transaction, $TransactionProposal, TransactionProposal, $TransferDetails, TransferDetails, $Transfer, Transfer, $current_user, current_user };

type __defaultExports = {
  "AbiSource": typeof AbiSource;
  "Address": typeof Address;
  "Bytes": typeof Bytes;
  "Bytes32": typeof Bytes32;
  "Bytes4": typeof Bytes4;
  "Name": typeof Name;
  "TargetSelector": typeof TargetSelector;
  "TransactionProposalStatus": typeof TransactionProposalStatus;
  "TransferDirection": typeof TransferDirection;
  "current_user_accounts": typeof current_user_accounts;
  "uint16": typeof uint16;
  "uint256": typeof uint256;
  "uint64": typeof uint64;
  "User": typeof User;
  "Account": typeof Account;
  "ProposalResponse": typeof ProposalResponse;
  "Approval": typeof Approval;
  "Contact": typeof Contact;
  "Contract": typeof Contract;
  "Function": typeof Function;
  "Operation": typeof Operation;
  "Policy": typeof Policy;
  "PolicyState": typeof PolicyState;
  "Proposal": typeof Proposal;
  "Receipt": typeof Receipt;
  "Rejection": typeof Rejection;
  "Simulation": typeof Simulation;
  "Target": typeof Target;
  "Transaction": typeof Transaction;
  "TransactionProposal": typeof TransactionProposal;
  "TransferDetails": typeof TransferDetails;
  "Transfer": typeof Transfer;
  "current_user": typeof current_user;
  "global": typeof $default__globals
};
const __defaultExports: __defaultExports = {
  "AbiSource": AbiSource,
  "Address": Address,
  "Bytes": Bytes,
  "Bytes32": Bytes32,
  "Bytes4": Bytes4,
  "Name": Name,
  "TargetSelector": TargetSelector,
  "TransactionProposalStatus": TransactionProposalStatus,
  "TransferDirection": TransferDirection,
  "current_user_accounts": current_user_accounts,
  "uint16": uint16,
  "uint256": uint256,
  "uint64": uint64,
  "User": User,
  "Account": Account,
  "ProposalResponse": ProposalResponse,
  "Approval": Approval,
  "Contact": Contact,
  "Contract": Contract,
  "Function": Function,
  "Operation": Operation,
  "Policy": Policy,
  "PolicyState": PolicyState,
  "Proposal": Proposal,
  "Receipt": Receipt,
  "Rejection": Rejection,
  "Simulation": Simulation,
  "Target": Target,
  "Transaction": Transaction,
  "TransactionProposal": TransactionProposal,
  "TransferDetails": TransferDetails,
  "Transfer": Transfer,
  "current_user": current_user,
  "global": $default__globals
};
export default __defaultExports;
