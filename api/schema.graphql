# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

scalar AbiFunction @specifiedBy(url: "https://docs.soliditylang.org/en/latest/abi-spec.html#json")

enum AbiSource {
  Verified
}

enum AbiSourceConfidence {
  High
  Low
  Medium
}

type Account implements Labelled & Node {
  active: Boolean!
  address: UAddress!
  approvers: [Approver!]!
  chain: Chain!
  id: ID!
  implementation: Address!
  messages: [Message!]!
  name: String!
  photo: URL
  policies: [Policy!]!
  proposals(input: ProposalsInput! = {}): [Proposal!]!
  salt: Bytes32!
  transactions: [Transaction!]!
  transfers(input: TransfersInput! = {}): [Transfer!]!
  upgradedAtBlock: BigInt
}

enum AccountEvent {
  created
  updated
  upgraded
}

type AccountUpdated implements CustomNode {
  account: Account!
  event: AccountEvent!
  id: ID!
}

input AccountUpdatedInput {
  """Defaults to user accounts"""
  accounts: [UAddress!]

  """Defaults to all events"""
  events: [AccountEvent!]
}

input AccountsInput {
  chain: Chain
}

type Action implements Node {
  allow: Boolean!
  description: String
  functions: [ActionFunction!]!
  id: ID!
  label: String!
}

type ActionFunction implements Node {
  abi: AbiFunction

  """Default: apply to all contracts"""
  contract: Address
  id: ID!

  """Default: apply to all selectors"""
  selector: Selector
}

input ActionFunctionInput {
  abi: AbiFunction

  """Default: apply to all contracts"""
  contract: Address

  """Default: apply to all selectors"""
  selector: Selector
}

input ActionInput {
  allow: Boolean!
  description: String
  functions: [ActionFunctionInput!]!
  label: String!
}

"""Ethereum address"""
scalar Address

type Approval implements Node & ProposalResponse {
  approver: Approver!
  createdAt: DateTime!
  id: ID!
  invalid: Boolean!
  issues: [ApprovalIssue!]!
  proposal: Proposal!
}

enum ApprovalIssue {
  Expired
  HashMismatch
}

input ApproveInput {
  """Defaults to current approver"""
  approver: Address
  id: ID!
  signature: Bytes!
}

type Approver implements Node {
  address: Address!
  details: ApproverDetails
  id: ID!
  label: String
}

type ApproverDetails implements Node {
  bluetoothDevices: [MAC!]
  cloud: Cloud
  id: ID!
  name: String
  pushToken: String
}

input BalanceInput {
  account: UAddress
  transaction: ID
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""bytes hex string"""
scalar Bytes

"""32-byte hex string"""
scalar Bytes32

"""zksync | zksync-sepolia | zksync-local"""
scalar Chain

type Cloud {
  provider: CloudProvider!
  subject: String!
}

input CloudInput {
  provider: CloudProvider!
  subject: String!
}

enum CloudProvider {
  Apple
  Google
}

interface Confirmed implements Node & Result {
  block: BigInt!
  ethFeePerGas: Decimal!
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  networkEthFee: Decimal!
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type ConfirmedFailure implements Confirmed & Failure & Node & Result {
  block: BigInt!
  ethFeePerGas: Decimal!
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  networkEthFee: Decimal!
  reason: String
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type ConfirmedSuccess implements Confirmed & Node & Result & Success {
  block: BigInt!
  ethFeePerGas: Decimal!
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  networkEthFee: Decimal!
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type Contact implements Labelled & Node {
  address: UAddress!
  id: ID!
  name: String!
}

input ContactsInput {
  chain: Chain
  query: String
}

type Contract implements Node {
  address: Address!
  functions: [ContractFunction!]!
  id: ID!
}

type ContractFunction implements Node {
  abi: JSON!
  abiMd5: String!
  id: ID!
  selector: Selector!
  source: AbiSource!
  sourceConfidence: AbiSourceConfidence!
}

input ContractFunctionInput {
  contract: Address!
  selector: Bytes!
}

input ContractInput {
  contract: Address!
}

input CreateAccountInput {
  chain: Chain! = "zksync-sepolia"
  name: String!
  policies: [PolicyInput!]!
  salt: Bytes32
}

interface CustomNode {
  id: ID!
}

type DappMetadata {
  icons: [URL!]!
  name: String!
  url: URL!
}

input DappMetadataInput {
  icons: [URL!]!
  name: String!
  url: URL!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Decimal"""
scalar Decimal

interface Err {
  message: String!
}

input EstimateFeesPerGasInput {
  feeToken: UAddress!
}

type EstimatedTransactionFees implements CustomNode {
  id: ID!
  maxNetworkEthFee: Decimal!
  paymasterEthFees: PaymasterFees!
}

interface Event implements Node {
  account: Account!
  block: BigInt!
  confirmed: Boolean!
  id: ID!
  internal: Boolean!
  logIndex: Float!
  result: Result
  systxHash: Bytes32!
  timestamp: DateTime!
}

input ExecuteTransactionInput {
  id: ID!
  ignoreSimulation: Boolean
}

interface Failure implements Node & Result {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  reason: String
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type FeesPerGas implements CustomNode {
  feeTokenDecimals: Float!
  id: ID!
  maxFeePerGas: Decimal!
  maxPriorityFeePerGas: Decimal!
}

type GenericOp {
  _args: [JSON!]!
  _name: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

interface Labelled {
  name: String!
}

input LinkInput {
  token: String!
}

"""
A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
"""
scalar MAC

type Message implements Node & Proposal {
  account: Account!
  approvals: [Approval!]!
  createdAt: DateTime!
  dapp: DappMetadata
  hash: Bytes32!
  icon: URL
  id: ID!
  label: String
  message: String!
  policy: Policy!
  proposedBy: Approver!
  rejections: [Rejection!]!
  signature: Bytes32
  signedHash: Bytes32!
  timestamp: DateTime!
  typedData: TypedData
  updatable: Boolean!
  validationErrors: [ValidationError!]!
}

type Mutation {
  approveMessage(input: ApproveInput!): Message!
  approveTransaction(input: ApproveInput!): Transaction!
  createAccount(input: CreateAccountInput!): Account!
  deleteContact(address: UAddress!): ID
  execute(input: ExecuteTransactionInput!): Transaction
  link(input: LinkInput!): User!
  proposeCancelScheduledTransaction(input: ProposeCancelScheduledTransactionInput!): Transaction!
  proposeMessage(input: ProposeMessageInput!): Message!
  proposePolicies(input: ProposePoliciesInput!): [Policy!]!
  proposeTransaction(input: ProposeTransactionInput!): Transaction!
  rejectProposal(input: UniqueProposalInput!): Proposal!
  removeMessage(input: UniqueProposalInput!): ID!
  removePolicy(input: UniquePolicyInput!): Policy!
  removeToken(address: UAddress!): ID
  removeTransaction(id: ID!): ID
  requestTokens(input: RequestTokensInput!): [Address!]!
  updateAccount(input: UpdateAccountInput!): Account!
  updateApprover(input: UpdateApproverInput!): Approver!
  updatePolicyDetails(input: UpdatePolicyDetailsInput!): UpdatePolicyDetailsResponse
  updateProposal(input: UpdateProposalInput!): Proposal!
  updateTransaction(input: UpdateTransactionInput!): Transaction!
  updateUser(input: UpdateUserInput!): User!
  upsertContact(input: UpsertContactInput!): Contact!
  upsertToken(input: UpsertTokenInput!): Token!
}

type NameTaken implements Err {
  message: String!
}

interface Node {
  id: ID!
}

type Operation {
  data: Bytes
  function: OperationFunction
  to: Address!
  value: Uint256
}

union OperationFunction = GenericOp | RemovePolicyOp | SwapOp | TransferApprovalOp | TransferFromOp | TransferOp | UpdatePolicyOp

input OperationInput {
  data: Bytes
  to: Address!
  value: Uint256
}

type OptimisticSuccess implements Node & Result & Success {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type PaymasterFees {
  activation: Decimal!
  total: Decimal!
}

type Policy implements Node & PolicyState {
  account: Account!
  actions: [Action!]!
  activationBlock: BigInt
  allowMessages: Boolean!
  approvers: [Approver!]!
  createdAt: DateTime!

  """seconds"""
  delay: Float!
  draft: PolicyState
  hasBeenActive: Boolean!
  hash: Bytes32!
  id: ID!
  initState: Boolean!
  isActive: Boolean!
  isDraft: Boolean!
  key: PolicyKey!
  latest: Policy
  name: String!
  proposal: Transaction
  threshold: Float!
  transfers: TransfersConfig!
  validationErrors(proposal: ID!): [ValidationError!]!
}

enum PolicyEvent {
  activated
  created
  removed
  updated
}

input PolicyInput {
  actions: [ActionInput!]
  allowMessages: Boolean
  approvers: [Address!]

  """seconds"""
  delay: Float
  key: PolicyKey
  name: String
  threshold: Float
  transfers: TransfersConfigInput
}

"""Policy key: an unsigned integer [0, 65535]"""
scalar PolicyKey

interface PolicyState implements Node {
  account: Account!
  activationBlock: BigInt
  createdAt: DateTime!
  draft: PolicyState
  hasBeenActive: Boolean!
  id: ID!
  initState: Boolean!
  isActive: Boolean!
  isDraft: Boolean!
  key: PolicyKey!
  latest: Policy
  proposal: Transaction
}

type PolicyUpdated implements CustomNode {
  account: UAddress!
  event: PolicyEvent!
  id: ID!
  policy: Policy!
}

input PolicyUpdatedInput {
  accounts: [UAddress!]

  """Defaults to all events"""
  events: PolicyEvent
}

input PrepareTransactionInput {
  account: UAddress!
  feeToken: Address
  gas: Uint256
  operations: [OperationInput!]!
  policy: PolicyKey
  timestamp: DateTime
}

type Price implements CustomNode {
  eth: Decimal!
  ethEma: Decimal!
  id: ID!
  usd: Decimal!
  usdEma: Decimal!
}

interface Proposal implements Node {
  account: Account!
  approvals: [Approval!]!
  createdAt: DateTime!
  dapp: DappMetadata
  hash: Bytes32!
  icon: URL
  id: ID!
  label: String
  policy: Policy!
  proposedBy: Approver!
  rejections: [Rejection!]!
  timestamp: DateTime!
  validationErrors: [ValidationError!]!
}

enum ProposalEvent {
  approval
  cancelled
  create
  delete
  executed
  rejection
  scheduled
  signed
  simulated
  submitted
  update
}

interface ProposalResponse implements Node {
  approver: Approver!
  createdAt: DateTime!
  id: ID!
  proposal: Proposal!
}

type ProposalUpdated {
  account: UAddress!
  event: ProposalEvent!
  id: ID!
  proposal: Proposal
}

input ProposalUpdatedInput {
  """Defaults to user accounts if no proposals are provided"""
  accounts: [UAddress!]

  """Defaults to all events"""
  events: [ProposalEvent!]
  proposals: [ID!]
}

input ProposalsInput {
  pending: Boolean
}

input ProposeCancelScheduledTransactionInput {
  account: UAddress!
  dapp: DappMetadataInput
  feeToken: Address
  gas: Uint256
  icon: URL
  label: String
  policy: PolicyKey
  proposal: ID!

  """Approve the proposal"""
  signature: Bytes
  timestamp: DateTime
}

input ProposeMessageInput {
  account: UAddress!
  dapp: DappMetadataInput
  icon: URL
  label: String

  """Optional if typedData is provided"""
  message: String

  """Approve the proposal"""
  signature: Bytes
  timestamp: DateTime
  typedData: TypedData
}

input ProposePoliciesInput {
  account: UAddress!
  policies: [PolicyInput!]!
}

input ProposeTransactionInput {
  account: UAddress!
  dapp: DappMetadataInput
  feeToken: Address
  gas: Uint256
  icon: URL
  label: String
  operations: [OperationInput!]!
  policy: PolicyKey

  """Approve the proposal"""
  signature: Bytes
  timestamp: DateTime
}

type Query {
  account(
    """Defaults to random user account"""
    address: UAddress
  ): Account
  accounts(input: AccountsInput! = {}): [Account!]!
  approver(
    """Defaults to current approver"""
    address: Address
  ): Approver!
  contact(address: UAddress!): Contact
  contacts(input: ContactsInput! = {}): [Contact!]!
  contract(input: ContractInput!): Contract
  contractFunction(input: ContractFunctionInput!): ContractFunction
  estimateFeesPerGas(input: EstimateFeesPerGasInput!): FeesPerGas
  label(address: UAddress!): String
  message(id: ID!): Message
  nameAvailable(name: String!): Boolean!
  node(id: ID!): Node
  policy(input: UniquePolicyInput!): Policy
  prepareTransaction(input: PrepareTransactionInput!): TransactionPreparation!
  proposal(id: ID!): Proposal
  requestableTokens(input: RequestTokensInput!): [Address!]!
  token(address: UAddress!): Token
  tokenMetadata(address: UAddress!): TokenMetadata
  tokens(input: TokensInput! = {}): [Token!]!
  transaction(id: ID!): Transaction
  transfer(id: ID!): Transferlike
  user: User!
}

type Rejection implements Node & ProposalResponse {
  approver: Approver!
  createdAt: DateTime!
  id: ID!
  proposal: Proposal!
}

type RemovePolicyOp {
  _args: [JSON!]!
  _name: String!
  account: Address!
  key: PolicyKey!
}

type RemovedPolicy implements Node & PolicyState {
  account: Account!
  activationBlock: BigInt
  createdAt: DateTime!
  draft: PolicyState
  hasBeenActive: Boolean!
  id: ID!
  initState: Boolean!
  isActive: Boolean!
  isDraft: Boolean!
  key: PolicyKey!
  latest: Policy
  proposal: Transaction
}

input RequestTokensInput {
  account: UAddress!
}

interface Result implements Node {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type Scheduled implements Node & Result {
  cancelled: Boolean!
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  response: Bytes!
  scheduledFor: DateTime!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

"""function selector (4-byte hex string)"""
scalar Selector

type SimulatedFailure implements Failure & Node & Result {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  reason: String
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
  validationErrors: [String!]!
}

type SimulatedSuccess implements Node & Result & Success {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  reason: String
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

input SpendingInput {
  account: UAddress!
  policyKey: PolicyKey
  since: DateTime
}

type Subscription {
  accountUpdated(input: AccountUpdatedInput! = {}): AccountUpdated!
  policyUpdated(input: PolicyUpdatedInput! = {}): PolicyUpdated!
  proposalUpdated(input: ProposalUpdatedInput! = {}): ProposalUpdated!
  transfer(input: TransferSubscriptionInput! = {}): Transfer!
  userLinked: UserLinked!
}

interface Success implements Node & Result {
  events: [Event!]!
  gasUsed: BigInt!
  id: ID!
  response: Bytes!
  systemTx: SystemTx
  timestamp: DateTime!
  transaction: Transaction!
  transfers: [Transfer!]!
}

type SwapOp {
  _args: [JSON!]!
  _name: String!
  deadline: DateTime!
  fromAmount: Decimal!
  fromToken: Address!
  minimumToAmount: Decimal!
  toToken: Address!
}

type SystemTx implements Node {
  ethCreditUsed: Decimal!
  ethPerFeeToken: Decimal!
  hash: Bytes32!
  id: ID!
  maxEthFeePerGas: Decimal!
  maxEthFees: Decimal!
  maxNetworkEthFee: Decimal!
  paymasterEthFees: PaymasterFees!
  proposal: Transaction!
  result: Result
  timestamp: DateTime!
  usdPerFeeToken: Decimal!
}

type Token implements Labelled & Node {
  address: UAddress!
  balance(input: BalanceInput!): Decimal!
  decimals: Int!
  estimatedFeesPerGas: FeesPerGas
  icon: URL
  id: ID!
  isFeeToken: Boolean!
  name: String!
  price: Price
  pythUsdPriceId: Bytes32
  removable: Boolean!
  spending(input: SpendingInput!): TokenSpending!
  symbol: String!
  units: [TokenUnit!]
  userOwned: Boolean!
}

type TokenMetadata implements CustomNode {
  decimals: Int!
  icon: URL
  id: ID!
  name: String!
  pythUsdPriceId: Bytes32
  symbol: String!
}

type TokenSpending {
  limit: Decimal
  remaining: Decimal
  since: DateTime!
  spent: Decimal!
  transfers: [Transferlike!]!
}

type TokenUnit {
  decimals: Int!
  symbol: String!
}

input TokenUnitInput {
  decimals: Int!
  symbol: String!
}

input TokensInput {
  address: [UAddress!]
  chain: Chain
  feeToken: Boolean
  query: String
}

type Transaction implements Node & Proposal {
  account: Account!
  approvals: [Approval!]!
  createdAt: DateTime!
  dapp: DappMetadata
  estimatedFees: EstimatedTransactionFees!
  executable: Boolean!
  feeToken: Token!
  gasLimit: BigInt!
  hash: Bytes32!
  icon: URL
  id: ID!
  label: String
  maxAmount: Decimal!
  operations: [Operation!]!
  paymaster: Address!
  paymasterEthFees: PaymasterFees!
  policy: Policy!
  proposedBy: Approver!
  rejections: [Rejection!]!
  result: Result
  results: [Result!]!
  status: TransactionStatus!
  systx: SystemTx
  systxs: [SystemTx!]!
  timestamp: DateTime!
  updatable: Boolean!
  validationErrors: [ValidationError!]!
}

type TransactionPreparation implements CustomNode {
  account: UAddress!
  feeToken: Token!
  gasLimit: BigInt!
  hash: Bytes32!
  id: ID!
  maxAmount: Decimal!
  maxNetworkFee: Decimal!
  paymaster: Address!
  paymasterEthFees: PaymasterFees!
  policy: PolicyKey!
  timestamp: DateTime!
  totalEthFees: Decimal!
}

enum TransactionStatus {
  Cancelled
  Executing
  Failed
  Pending
  Scheduled
  Successful
}

type Transfer implements Event & Node & Transferlike {
  account: Account!
  amount: Decimal!
  block: BigInt!
  confirmed: Boolean!
  from: Address!
  id: ID!
  incoming: Boolean!
  internal: Boolean!
  isFeeTransfer: Boolean!
  logIndex: Float!
  outgoing: Boolean!
  result: Result
  spentBy: Policy
  systxHash: Bytes32!
  timestamp: DateTime!
  to: Address!
  token: Token
  tokenAddress: UAddress!
  value: Decimal
}

type TransferApproval implements Event & Node & Transferlike {
  account: Account!
  amount: Decimal!
  block: BigInt!
  confirmed: Boolean!
  delta: Decimal!
  from: Address!
  id: ID!
  incoming: Boolean!
  internal: Boolean!
  isFeeTransfer: Boolean!
  logIndex: Float!
  outgoing: Boolean!
  result: Result
  spentBy: Policy
  systxHash: Bytes32!
  timestamp: DateTime!
  to: Address!
  token: Token
  tokenAddress: UAddress!
  value: Decimal
}

type TransferApprovalOp implements TransferlikeOp {
  amount: Decimal!
  to: Address!
  token: Address!
}

type TransferFromOp implements TransferlikeOp {
  amount: Decimal!
  from: Address!
  to: Address!
  token: Address!
}

type TransferLimit implements Node {
  amount: BigInt!

  """seconds"""
  duration: Float!
  id: ID!
  token: Address!
}

input TransferLimitInput {
  amount: BigInt!

  """seconds"""
  duration: Float!
  token: Address!
}

type TransferOp implements TransferlikeOp {
  amount: Decimal!
  to: Address!
  token: Address!
}

input TransferSubscriptionInput {
  accounts: [UAddress!]
  incoming: Boolean

  """Originating from an account transaction"""
  internal: Boolean
  outgoing: Boolean
}

interface Transferlike implements Event & Node {
  account: Account!
  amount: Decimal!
  block: BigInt!
  confirmed: Boolean!
  from: Address!
  id: ID!
  incoming: Boolean!
  internal: Boolean!
  isFeeTransfer: Boolean!
  logIndex: Float!
  outgoing: Boolean!
  result: Result
  spentBy: Policy
  systxHash: Bytes32!
  timestamp: DateTime!
  to: Address!
  token: Token
  tokenAddress: UAddress!
  value: Decimal
}

interface TransferlikeOp {
  amount: Decimal!
  to: Address!
  token: Address!
}

type TransfersConfig implements Node {
  budget: Float!
  defaultAllow: Boolean!
  id: ID!
  limits: [TransferLimit!]!
}

input TransfersConfigInput {
  """Defaults to the policy budget"""
  budget: Float
  defaultAllow: Boolean! = true
  limits: [TransferLimitInput!]! = []
}

input TransfersInput {
  incoming: Boolean

  """Originating from an account transaction"""
  internal: Boolean
  outgoing: Boolean
}

"""EIP712 Typed Data"""
scalar TypedData

"""EIP-3770 address"""
scalar UAddress @specifiedBy(url: "https://eips.ethereum.org/EIPS/eip-3770")

"""
A field whose value conforms to the standard URL format as specified in RFC3986
"""
scalar URL @specifiedBy(url: "https://www.ietf.org/rfc/rfc3986.txt")

"""256-bit unsigned integer"""
scalar Uint256

input UniquePolicyInput {
  account: UAddress!
  key: PolicyKey!
}

input UniqueProposalInput {
  id: ID!
}

input UpdateAccountInput {
  account: UAddress!
  name: String!
  photo: URL
}

input UpdateApproverInput {
  """Defaults to current approver"""
  address: Address
  bluetoothDevices: [MAC!]
  cloud: CloudInput
  name: String
  pushToken: String
}

input UpdatePolicyDetailsInput {
  account: UAddress!
  key: PolicyKey!
  name: String!
}

union UpdatePolicyDetailsResponse = NameTaken | Policy

type UpdatePolicyOp {
  _args: [JSON!]!
  _name: String!
  account: Address!
  approvers: [Address!]!
  key: PolicyKey!
  threshold: Float!
}

input UpdateProposalInput {
  id: ID!
  policy: PolicyKey
}

input UpdateTransactionInput {
  feeToken: Address
  id: ID!
  policy: PolicyKey
}

input UpdateUserInput {
  primaryAccount: UAddress
}

input UpsertContactInput {
  address: UAddress!
  name: String!
  previousAddress: UAddress
}

input UpsertTokenInput {
  address: UAddress!
  icon: URL
  name: String
  pythUsdPriceId: Bytes32
  symbol: String
  units: [TokenUnitInput!]
}

type User implements Node {
  approvers: [Approver!]!
  contacts: [Contact!]!
  id: ID!
  linkingToken: String!
  primaryAccount: Account
}

type UserLinked implements CustomNode {
  id: ID!
  issuer: Address!
  linker: Address!
  user: User!
}

type ValidationError {
  operation: Float
  reason: String!
}