type Account @entity {
  "{address}"
  id: Bytes!
  impl: AccountImpl!
  txs: [Tx!]! @derivedFrom(field: "account")
  transfers: [Transfer!]! @derivedFrom(field: "account")
}

type AccountImpl @entity {
  "{address}"
  id: Bytes!
  blockHash: Bytes!
  timestamp: BigInt!
  proxies: [Account!]! @derivedFrom(field: "impl")
}

type Tx @entity {
  "{transaction.hash}"
  id: Bytes!
  account: Account!
  transactionHash: Bytes!
  hash: Bytes!
  success: Boolean!
  response: Bytes!
  # Metadata
  executor: Bytes!
  blockHash: Bytes!
  timestamp: BigInt!
  transfers: [Transfer!]! @derivedFrom(field: "tx")
}

type User @entity {
  "{account.id}-{addr}"
  id: String!
  account: Account!
  addr: Bytes!
  configs: [UserConfig!]!
  allConfigs: [UserConfig!]! @derivedFrom(field: "user")
}

type UserConfig @entity {
  "{blockHash}-{logIndex}"
  id: String!
  user: User!
  approvers: [Bytes!]!
}

type Transfer @entity {
  "{tx.id}-{tx.log.index}"
  id: String!
  account: Account!
  tx: Tx
  transactionHash: Bytes!
  token: Bytes!
  type: TransferType!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  # Metadata
  blockHash: Bytes!
  timestamp: BigInt!
}

enum TransferType {
  IN
  OUT
}

# type TokenTransferApproval @entity {
#   "{tx.hash}-{tx.log.index}"
#   id: ID!
#   # token: Token!
#   token: Bytes!
#   account: Account!
#   type: String!
#   owner: Bytes!
#   spender: Bytes!
#   value: BigInt!
# }
