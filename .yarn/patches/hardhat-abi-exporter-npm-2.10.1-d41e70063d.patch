diff --git a/tasks/clear_abi.js b/tasks/clear_abi.js
index 8b7faca59f2852247e5f7544c9e47cdeee6f9c95..396b543b5ae26d4e8eed5982ea5e905b17358a1a 100644
--- a/tasks/clear_abi.js
+++ b/tasks/clear_abi.js
@@ -34,6 +34,7 @@ subtask(
   'path', 'path to look for ABIs', undefined, types.string
 ).setAction(async function (args, hre) {
   const outputDirectory = path.resolve(hre.config.paths.root, args.path);
+  const outputExtension = args.format === 'typescript' ? '.ts' : '.json';
 
   if (!fs.existsSync(outputDirectory)) {
     return;
@@ -42,7 +43,7 @@ subtask(
   const files = readdirRecursive(outputDirectory);
 
   await Promise.all(files.map(async function (file) {
-    if (path.extname(file) !== '.json') {
+    if (path.extname(file) !== outputExtension) {
       // ABIs must be stored as JSON
       return;
     }
diff --git a/tasks/export_abi.js b/tasks/export_abi.js
index f5dec438e35ab8e0429509adbbe01cf4eee2e879..9dd0afc8d288a0d07a43ad686fe97c2a7851fc9c 100644
--- a/tasks/export_abi.js
+++ b/tasks/export_abi.js
@@ -54,14 +54,15 @@ subtask(
       abi = new Interface(abi).format(FormatTypes.minimal);
     } else if (config.format == 'fullName') {
       abi = new Interface(abi).format(FormatTypes.fullName);
-    } else if (config.format != 'json') {
+    } else if (config.format != 'json' && config.format !== 'typescript') {
       throw new HardhatPluginError(`Unknown format: ${config.format}`);
     }
 
+    const extension = config.format === 'typescript' ? '.ts' : '.json';
     const destination = path.resolve(
       outputDirectory,
       config.rename(sourceName, contractName)
-    ) + '.json';
+    ) + extension;
 
     outputData.push({ abi, destination });
   }));
@@ -82,7 +83,10 @@ subtask(
   }
 
   await Promise.all(outputData.map(async function ({ abi, destination }) {
+    let output = JSON.stringify(abi, null, config.spacing);
+    if (config.format === 'typescript') output = `export default ${output} as const;`;
+
     await fs.promises.mkdir(path.dirname(destination), { recursive: true });
-    await fs.promises.writeFile(destination, `${JSON.stringify(abi, null, config.spacing)}\n`, { flag: 'w' });
+    await fs.promises.writeFile(destination, output, { flag: 'w' });
   }));
 });
